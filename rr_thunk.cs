//This file is automatically generated. DO NOT EDIT!
using System;
using RobotRaconteurWeb;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 0108


namespace com.robotraconteur.action
{
public static class com__robotraconteur__actionConstants  {
}
    public enum ActionStatusCode
    {
    error = -3,
    failed = -2,
    cancelled = -1,
    unknown = 0,
    queued = 1,
    running = 2,
    complete = 3
    };
}

namespace com.robotraconteur.action
{
public class com__robotraconteur__actionFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.action\n\nstdver 0.9\n\nenum ActionStatusCode\nerror = -3,\nfailed = -2,\ncancelled = -1,\nunknown = 0,\nqueued,\nrunning,\ncomplete\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.action";}
    public com__robotraconteur__actionFactory() : this(null,null) {}
    public com__robotraconteur__actionFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.geometry
{
[RobotRaconteurServiceStruct("com.robotraconteur.geometry.NamedTransform")]
public class NamedTransform
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier child_frame;
    public Transform transform;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.NamedPose")]
public class NamedPose
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public Pose pose;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.PoseWithCovariance")]
public class PoseWithCovariance
{
    public Pose pose;
    public MultiDimArray covariance;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.NamedPoseWithCovariance")]
public class NamedPoseWithCovariance
{
    public NamedPose pose;
    public MultiDimArray covariance;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.NamedPose2D")]
public class NamedPose2D
{
    public com.robotraconteur.identifier.Identifier parent_frame;
    public com.robotraconteur.identifier.Identifier frame;
    public Pose2D pose;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.NamedSpatialVelocity")]
public class NamedSpatialVelocity
{
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialVelocity velocity;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.NamedSpatialAcceleration")]
public class NamedSpatialAcceleration
{
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialAcceleration Acceleration;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.NamedWrench")]
public class NamedWrench
{
    public com.robotraconteur.identifier.Identifier frame;
    public Wrench wrench;
}

[RobotRaconteurServiceStruct("com.robotraconteur.geometry.NamedSpatialInertia")]
public class NamedSpatialInertia
{
    public com.robotraconteur.identifier.Identifier frame;
    public SpatialInertia inertia;
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Vector2",typeof(double), 2)]
public struct Vector2
{
    public double x;
    public double y;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.x;
    a.Array[a.Offset + 1] = this.y;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    this.x = a.Array[a.Offset + 0];
    this.y = a.Array[a.Offset + 1];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Vector3",typeof(double), 3)]
public struct Vector3
{
    public double x;
    public double y;
    public double z;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.x;
    a.Array[a.Offset + 1] = this.y;
    a.Array[a.Offset + 2] = this.z;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    this.x = a.Array[a.Offset + 0];
    this.y = a.Array[a.Offset + 1];
    this.z = a.Array[a.Offset + 2];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Vector6",typeof(double), 6)]
public struct Vector6
{
    public double alpha;
    public double beta;
    public double gamma;
    public double x;
    public double y;
    public double z;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.alpha;
    a.Array[a.Offset + 1] = this.beta;
    a.Array[a.Offset + 2] = this.gamma;
    a.Array[a.Offset + 3] = this.x;
    a.Array[a.Offset + 4] = this.y;
    a.Array[a.Offset + 5] = this.z;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    this.alpha = a.Array[a.Offset + 0];
    this.beta = a.Array[a.Offset + 1];
    this.gamma = a.Array[a.Offset + 2];
    this.x = a.Array[a.Offset + 3];
    this.y = a.Array[a.Offset + 4];
    this.z = a.Array[a.Offset + 5];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Point2D",typeof(double), 2)]
public struct Point2D
{
    public double x;
    public double y;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.x;
    a.Array[a.Offset + 1] = this.y;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    this.x = a.Array[a.Offset + 0];
    this.y = a.Array[a.Offset + 1];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Point",typeof(double), 3)]
public struct Point
{
    public double x;
    public double y;
    public double z;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.x;
    a.Array[a.Offset + 1] = this.y;
    a.Array[a.Offset + 2] = this.z;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    this.x = a.Array[a.Offset + 0];
    this.y = a.Array[a.Offset + 1];
    this.z = a.Array[a.Offset + 2];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Size2D",typeof(double), 2)]
public struct Size2D
{
    public double width;
    public double height;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[2]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.width;
    a.Array[a.Offset + 1] = this.height;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 2) throw new ArgumentException("ArraySegment invalid length");
    this.width = a.Array[a.Offset + 0];
    this.height = a.Array[a.Offset + 1];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Size",typeof(double), 3)]
public struct Size
{
    public double width;
    public double height;
    public double depth;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.width;
    a.Array[a.Offset + 1] = this.height;
    a.Array[a.Offset + 2] = this.depth;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    this.width = a.Array[a.Offset + 0];
    this.height = a.Array[a.Offset + 1];
    this.depth = a.Array[a.Offset + 2];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Rect",typeof(double), 4)]
public struct Rect
{
    public Point2D origin;
    public Size2D size;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 2);
    this.origin.GetNumericArray(ref a0);
    var a2 = new ArraySegment<double>(a.Array, a.Offset + 2, 2);
    this.size.GetNumericArray(ref a2);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 2);
    this.origin.AssignFromNumericArray(ref a0);
    var a2 = new ArraySegment<double>(a.Array, a.Offset + 2, 2);
    this.size.AssignFromNumericArray(ref a2);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Box",typeof(double), 6)]
public struct Box
{
    public Point origin;
    public Size size;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.origin.GetNumericArray(ref a0);
    var a3 = new ArraySegment<double>(a.Array, a.Offset + 3, 3);
    this.size.GetNumericArray(ref a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.origin.AssignFromNumericArray(ref a0);
    var a3 = new ArraySegment<double>(a.Array, a.Offset + 3, 3);
    this.size.AssignFromNumericArray(ref a3);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Quaternion",typeof(double), 4)]
public struct Quaternion
{
    public double w;
    public double x;
    public double y;
    public double z;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.w;
    a.Array[a.Offset + 1] = this.x;
    a.Array[a.Offset + 2] = this.y;
    a.Array[a.Offset + 3] = this.z;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    this.w = a.Array[a.Offset + 0];
    this.x = a.Array[a.Offset + 1];
    this.y = a.Array[a.Offset + 2];
    this.z = a.Array[a.Offset + 3];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Plane",typeof(double), 4)]
public struct Plane
{
    public Vector3 normal;
    public double a;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[4]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.normal.GetNumericArray(ref a0);
    a.Array[a.Offset + 3] = this.a;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 4) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.normal.AssignFromNumericArray(ref a0);
    this.a = a.Array[a.Offset + 3];
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Transform",typeof(double), 7)]
public struct Transform
{
    public Quaternion rotation;
    public Vector3 translation;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[7]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 4);
    this.rotation.GetNumericArray(ref a0);
    var a4 = new ArraySegment<double>(a.Array, a.Offset + 4, 3);
    this.translation.GetNumericArray(ref a4);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 4);
    this.rotation.AssignFromNumericArray(ref a0);
    var a4 = new ArraySegment<double>(a.Array, a.Offset + 4, 3);
    this.translation.AssignFromNumericArray(ref a4);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Pose",typeof(double), 7)]
public struct Pose
{
    public Quaternion orientation;
    public Point position;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[7]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 4);
    this.orientation.GetNumericArray(ref a0);
    var a4 = new ArraySegment<double>(a.Array, a.Offset + 4, 3);
    this.position.GetNumericArray(ref a4);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 7) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 4);
    this.orientation.AssignFromNumericArray(ref a0);
    var a4 = new ArraySegment<double>(a.Array, a.Offset + 4, 3);
    this.position.AssignFromNumericArray(ref a4);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Pose2D",typeof(double), 3)]
public struct Pose2D
{
    public double orientation;
    public Point2D position;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[3]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.orientation;
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 1, 2);
    this.position.GetNumericArray(ref a1);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 3) throw new ArgumentException("ArraySegment invalid length");
    this.orientation = a.Array[a.Offset + 0];
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 1, 2);
    this.position.AssignFromNumericArray(ref a1);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.SpatialVelocity",typeof(double), 6)]
public struct SpatialVelocity
{
    public Vector3 angular;
    public Vector3 linear;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.angular.GetNumericArray(ref a0);
    var a3 = new ArraySegment<double>(a.Array, a.Offset + 3, 3);
    this.linear.GetNumericArray(ref a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.angular.AssignFromNumericArray(ref a0);
    var a3 = new ArraySegment<double>(a.Array, a.Offset + 3, 3);
    this.linear.AssignFromNumericArray(ref a3);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.SpatialAcceleration",typeof(double), 6)]
public struct SpatialAcceleration
{
    public Vector3 angular;
    public Vector3 linear;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.angular.GetNumericArray(ref a0);
    var a3 = new ArraySegment<double>(a.Array, a.Offset + 3, 3);
    this.linear.GetNumericArray(ref a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.angular.AssignFromNumericArray(ref a0);
    var a3 = new ArraySegment<double>(a.Array, a.Offset + 3, 3);
    this.linear.AssignFromNumericArray(ref a3);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.Wrench",typeof(double), 6)]
public struct Wrench
{
    public Vector3 torque;
    public Vector3 force;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[6]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.torque.GetNumericArray(ref a0);
    var a3 = new ArraySegment<double>(a.Array, a.Offset + 3, 3);
    this.force.GetNumericArray(ref a3);
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 6) throw new ArgumentException("ArraySegment invalid length");
    var a0 = new ArraySegment<double>(a.Array, a.Offset + 0, 3);
    this.torque.AssignFromNumericArray(ref a0);
    var a3 = new ArraySegment<double>(a.Array, a.Offset + 3, 3);
    this.force.AssignFromNumericArray(ref a3);
    }
}

[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.geometry.SpatialInertia",typeof(double), 10)]
public struct SpatialInertia
{
    public double m;
    public Vector3 com;
    public double ixx;
    public double ixy;
    public double ixz;
    public double iyy;
    public double iyz;
    public double izz;
    public double[] GetNumericArray()
    {
    var a=new ArraySegment<double>(new double[10]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 10) throw new ArgumentException("ArraySegment invalid length");
    a.Array[a.Offset + 0] = this.m;
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 1, 3);
    this.com.GetNumericArray(ref a1);
    a.Array[a.Offset + 4] = this.ixx;
    a.Array[a.Offset + 5] = this.ixy;
    a.Array[a.Offset + 6] = this.ixz;
    a.Array[a.Offset + 7] = this.iyy;
    a.Array[a.Offset + 8] = this.iyz;
    a.Array[a.Offset + 9] = this.izz;
    }
    public void AssignFromNumericArray(ref ArraySegment<double> a)
    {
    if(a.Count < 10) throw new ArgumentException("ArraySegment invalid length");
    this.m = a.Array[a.Offset + 0];
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 1, 3);
    this.com.AssignFromNumericArray(ref a1);
    this.ixx = a.Array[a.Offset + 4];
    this.ixy = a.Array[a.Offset + 5];
    this.ixz = a.Array[a.Offset + 6];
    this.iyy = a.Array[a.Offset + 7];
    this.iyz = a.Array[a.Offset + 8];
    this.izz = a.Array[a.Offset + 9];
    }
}

}

namespace com.robotraconteur.geometry
{
public class com__robotraconteur__geometryFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.geometry\n\nstdver 0.9\n\nimport com.robotraconteur.identifier\n\nusing com.robotraconteur.identifier.Identifier\n\nnamedarray Vector2\nfield double x\nfield double y\nend\n\nnamedarray Vector3\nfield double x\nfield double y\nfield double z\nend\n\nnamedarray Vector6\nfield double alpha\nfield double beta\nfield double gamma\nfield double x\nfield double y\nfield double z\nend\n\nnamedarray Point2D\nfield double x\nfield double y\nend\n\nnamedarray Point\nfield double x\nfield double y\nfield double z\nend\n\nnamedarray Size2D\nfield double width\nfield double height\nend\n\nnamedarray Size\nfield double width\nfield double height\nfield double depth\nend\n\nnamedarray Rect\nfield Point2D origin\nfield Size2D size\nend\n\nnamedarray Box\nfield Point origin\nfield Size size\nend\n\nnamedarray Quaternion\nfield double w\nfield double x\nfield double y\nfield double z\nend\n\nnamedarray Plane\nfield Vector3 normal\nfield double a\nend\n\nnamedarray Transform\nfield Quaternion rotation\nfield Vector3 translation\nend\n\nstruct NamedTransform\nfield Identifier parent_frame\nfield Identifier child_frame\nfield Transform transform\nend\n\nnamedarray Pose\nfield Quaternion orientation\nfield Point position\nend\n\nstruct NamedPose\nfield Identifier parent_frame\nfield Identifier frame\nfield Pose pose\nend\n\nstruct PoseWithCovariance\nfield Pose pose\nfield double[6,6] covariance\nend\n\nstruct NamedPoseWithCovariance\nfield NamedPose pose\nfield double[6,6] covariance\nend\n\nnamedarray Pose2D\nfield double orientation\nfield Point2D position\nend\n\nstruct NamedPose2D\nfield Identifier parent_frame\nfield Identifier frame\nfield Pose2D pose\nend\n\nnamedarray SpatialVelocity\nfield Vector3 angular\nfield Vector3 linear\nend\n\nstruct NamedSpatialVelocity\nfield Identifier frame\nfield SpatialVelocity velocity\nend\n\nnamedarray SpatialAcceleration\nfield Vector3 angular\nfield Vector3 linear\nend\n\nstruct NamedSpatialAcceleration\nfield Identifier frame\nfield SpatialAcceleration Acceleration\nend\n\nnamedarray Wrench\nfield Vector3 torque\nfield Vector3 force\nend\n\nstruct NamedWrench\nfield Identifier frame\nfield Wrench wrench\nend\n\nnamedarray SpatialInertia\nfield double m\nfield Vector3 com\nfield double ixx\nfield double ixy\nfield double ixz\nfield double iyy\nfield double iyz\nfield double izz\nend\n\nstruct NamedSpatialInertia\nfield Identifier frame\nfield SpatialInertia inertia\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.geometry";}
    public NamedTransform_stub NamedTransform_stubentry;
    public NamedPose_stub NamedPose_stubentry;
    public PoseWithCovariance_stub PoseWithCovariance_stubentry;
    public NamedPoseWithCovariance_stub NamedPoseWithCovariance_stubentry;
    public NamedPose2D_stub NamedPose2D_stubentry;
    public NamedSpatialVelocity_stub NamedSpatialVelocity_stubentry;
    public NamedSpatialAcceleration_stub NamedSpatialAcceleration_stubentry;
    public NamedWrench_stub NamedWrench_stubentry;
    public NamedSpatialInertia_stub NamedSpatialInertia_stubentry;
    public Vector2_stub Vector2_stubentry;
    public Vector3_stub Vector3_stubentry;
    public Vector6_stub Vector6_stubentry;
    public Point2D_stub Point2D_stubentry;
    public Point_stub Point_stubentry;
    public Size2D_stub Size2D_stubentry;
    public Size_stub Size_stubentry;
    public Rect_stub Rect_stubentry;
    public Box_stub Box_stubentry;
    public Quaternion_stub Quaternion_stubentry;
    public Plane_stub Plane_stubentry;
    public Transform_stub Transform_stubentry;
    public Pose_stub Pose_stubentry;
    public Pose2D_stub Pose2D_stubentry;
    public SpatialVelocity_stub SpatialVelocity_stubentry;
    public SpatialAcceleration_stub SpatialAcceleration_stubentry;
    public Wrench_stub Wrench_stubentry;
    public SpatialInertia_stub SpatialInertia_stubentry;
    public com__robotraconteur__geometryFactory() : this(null,null) {}
    public com__robotraconteur__geometryFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    NamedTransform_stubentry=new NamedTransform_stub(this,this.node,this.context);
    NamedPose_stubentry=new NamedPose_stub(this,this.node,this.context);
    PoseWithCovariance_stubentry=new PoseWithCovariance_stub(this,this.node,this.context);
    NamedPoseWithCovariance_stubentry=new NamedPoseWithCovariance_stub(this,this.node,this.context);
    NamedPose2D_stubentry=new NamedPose2D_stub(this,this.node,this.context);
    NamedSpatialVelocity_stubentry=new NamedSpatialVelocity_stub(this,this.node,this.context);
    NamedSpatialAcceleration_stubentry=new NamedSpatialAcceleration_stub(this,this.node,this.context);
    NamedWrench_stubentry=new NamedWrench_stub(this,this.node,this.context);
    NamedSpatialInertia_stubentry=new NamedSpatialInertia_stub(this,this.node,this.context);
    Vector2_stubentry=new Vector2_stub();
    Vector3_stubentry=new Vector3_stub();
    Vector6_stubentry=new Vector6_stub();
    Point2D_stubentry=new Point2D_stub();
    Point_stubentry=new Point_stub();
    Size2D_stubentry=new Size2D_stub();
    Size_stubentry=new Size_stub();
    Rect_stubentry=new Rect_stub();
    Box_stubentry=new Box_stub();
    Quaternion_stubentry=new Quaternion_stub();
    Plane_stubentry=new Plane_stub();
    Transform_stubentry=new Transform_stub();
    Pose_stubentry=new Pose_stub();
    Pose2D_stubentry=new Pose2D_stub();
    SpatialVelocity_stubentry=new SpatialVelocity_stub();
    SpatialAcceleration_stubentry=new SpatialAcceleration_stub();
    Wrench_stubentry=new Wrench_stub();
    SpatialInertia_stubentry=new SpatialInertia_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="NamedTransform")
    return NamedTransform_stubentry;
    if (objecttype=="NamedPose")
    return NamedPose_stubentry;
    if (objecttype=="PoseWithCovariance")
    return PoseWithCovariance_stubentry;
    if (objecttype=="NamedPoseWithCovariance")
    return NamedPoseWithCovariance_stubentry;
    if (objecttype=="NamedPose2D")
    return NamedPose2D_stubentry;
    if (objecttype=="NamedSpatialVelocity")
    return NamedSpatialVelocity_stubentry;
    if (objecttype=="NamedSpatialAcceleration")
    return NamedSpatialAcceleration_stubentry;
    if (objecttype=="NamedWrench")
    return NamedWrench_stubentry;
    if (objecttype=="NamedSpatialInertia")
    return NamedSpatialInertia_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="Vector2")
    return Vector2_stubentry;
    if (objecttype=="Vector3")
    return Vector3_stubentry;
    if (objecttype=="Vector6")
    return Vector6_stubentry;
    if (objecttype=="Point2D")
    return Point2D_stubentry;
    if (objecttype=="Point")
    return Point_stubentry;
    if (objecttype=="Size2D")
    return Size2D_stubentry;
    if (objecttype=="Size")
    return Size_stubentry;
    if (objecttype=="Rect")
    return Rect_stubentry;
    if (objecttype=="Box")
    return Box_stubentry;
    if (objecttype=="Quaternion")
    return Quaternion_stubentry;
    if (objecttype=="Plane")
    return Plane_stubentry;
    if (objecttype=="Transform")
    return Transform_stubentry;
    if (objecttype=="Pose")
    return Pose_stubentry;
    if (objecttype=="Pose2D")
    return Pose2D_stubentry;
    if (objecttype=="SpatialVelocity")
    return SpatialVelocity_stubentry;
    if (objecttype=="SpatialAcceleration")
    return SpatialAcceleration_stubentry;
    if (objecttype=="Wrench")
    return Wrench_stubentry;
    if (objecttype=="SpatialInertia")
    return SpatialInertia_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class NamedTransform_stub : IStructureStub {
    public NamedTransform_stub(com__robotraconteur__geometryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedTransform s = (NamedTransform)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "child_frame",s.child_frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<Transform>(rr_node, rr_context, "transform",ref s.transform));
    return new MessageElementStructure("com.robotraconteur.geometry.NamedTransform",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedTransform s=new NamedTransform();
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parent_frame"));
    s.child_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"child_frame"));
    s.transform =MessageElementUtil.UnpackNamedArrayFromArray<Transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"transform"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedPose_stub : IStructureStub {
    public NamedPose_stub(com__robotraconteur__geometryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedPose s = (NamedPose)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<Pose>(rr_node, rr_context, "pose",ref s.pose));
    return new MessageElementStructure("com.robotraconteur.geometry.NamedPose",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedPose s=new NamedPose();
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"pose"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class PoseWithCovariance_stub : IStructureStub {
    public PoseWithCovariance_stub(com__robotraconteur__geometryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PoseWithCovariance s = (PoseWithCovariance)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<Pose>(rr_node, rr_context, "pose",ref s.pose));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMultiDimArray(rr_node, "covariance",(MultiDimArray)DataTypeUtil.VerifyArrayLength(s.covariance,36,new uint[] {6, 6})));
    return new MessageElementStructure("com.robotraconteur.geometry.PoseWithCovariance",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PoseWithCovariance s=new PoseWithCovariance();
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"pose"));
    s.covariance =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(rr_node, MessageElement.FindElement(m.Elements,"covariance")),36,new uint[] {6, 6});
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedPoseWithCovariance_stub : IStructureStub {
    public NamedPoseWithCovariance_stub(com__robotraconteur__geometryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedPoseWithCovariance s = (NamedPoseWithCovariance)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "pose",s.pose));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMultiDimArray(rr_node, "covariance",(MultiDimArray)DataTypeUtil.VerifyArrayLength(s.covariance,36,new uint[] {6, 6})));
    return new MessageElementStructure("com.robotraconteur.geometry.NamedPoseWithCovariance",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedPoseWithCovariance s=new NamedPoseWithCovariance();
    s.pose =MessageElementUtil.UnpackStructure<NamedPose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"pose"));
    s.covariance =DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(rr_node, MessageElement.FindElement(m.Elements,"covariance")),36,new uint[] {6, 6});
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedPose2D_stub : IStructureStub {
    public NamedPose2D_stub(com__robotraconteur__geometryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedPose2D s = (NamedPose2D)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parent_frame",s.parent_frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<Pose2D>(rr_node, rr_context, "pose",ref s.pose));
    return new MessageElementStructure("com.robotraconteur.geometry.NamedPose2D",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedPose2D s=new NamedPose2D();
    s.parent_frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parent_frame"));
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.pose =MessageElementUtil.UnpackNamedArrayFromArray<Pose2D>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"pose"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedSpatialVelocity_stub : IStructureStub {
    public NamedSpatialVelocity_stub(com__robotraconteur__geometryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedSpatialVelocity s = (NamedSpatialVelocity)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<SpatialVelocity>(rr_node, rr_context, "velocity",ref s.velocity));
    return new MessageElementStructure("com.robotraconteur.geometry.NamedSpatialVelocity",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedSpatialVelocity s=new NamedSpatialVelocity();
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.velocity =MessageElementUtil.UnpackNamedArrayFromArray<SpatialVelocity>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"velocity"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedSpatialAcceleration_stub : IStructureStub {
    public NamedSpatialAcceleration_stub(com__robotraconteur__geometryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedSpatialAcceleration s = (NamedSpatialAcceleration)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<SpatialAcceleration>(rr_node, rr_context, "Acceleration",ref s.Acceleration));
    return new MessageElementStructure("com.robotraconteur.geometry.NamedSpatialAcceleration",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedSpatialAcceleration s=new NamedSpatialAcceleration();
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.Acceleration =MessageElementUtil.UnpackNamedArrayFromArray<SpatialAcceleration>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"Acceleration"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedWrench_stub : IStructureStub {
    public NamedWrench_stub(com__robotraconteur__geometryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedWrench s = (NamedWrench)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<Wrench>(rr_node, rr_context, "wrench",ref s.wrench));
    return new MessageElementStructure("com.robotraconteur.geometry.NamedWrench",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedWrench s=new NamedWrench();
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.wrench =MessageElementUtil.UnpackNamedArrayFromArray<Wrench>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"wrench"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class NamedSpatialInertia_stub : IStructureStub {
    public NamedSpatialInertia_stub(com__robotraconteur__geometryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__geometryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    NamedSpatialInertia s = (NamedSpatialInertia)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "frame",s.frame));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<SpatialInertia>(rr_node, rr_context, "inertia",ref s.inertia));
    return new MessageElementStructure("com.robotraconteur.geometry.NamedSpatialInertia",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    NamedSpatialInertia s=new NamedSpatialInertia();
    s.frame =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"frame"));
    s.inertia =MessageElementUtil.UnpackNamedArrayFromArray<SpatialInertia>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"inertia"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Vector2_stub : NamedArrayStub<Vector2,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Vector2 s) {
    return s.GetNumericArray();
    }
    public override Vector2 GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector2();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Vector2[] s) {
    return s.GetNumericArray();
    }
    public override Vector2[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector2[] s = new Vector2[m.Length / 2];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Vector2"; } }
}

public class Vector3_stub : NamedArrayStub<Vector3,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Vector3 s) {
    return s.GetNumericArray();
    }
    public override Vector3 GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector3();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Vector3[] s) {
    return s.GetNumericArray();
    }
    public override Vector3[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector3[] s = new Vector3[m.Length / 3];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Vector3"; } }
}

public class Vector6_stub : NamedArrayStub<Vector6,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Vector6 s) {
    return s.GetNumericArray();
    }
    public override Vector6 GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Vector6();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Vector6[] s) {
    return s.GetNumericArray();
    }
    public override Vector6[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Vector6[] s = new Vector6[m.Length / 6];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Vector6"; } }
}

public class Point2D_stub : NamedArrayStub<Point2D,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Point2D s) {
    return s.GetNumericArray();
    }
    public override Point2D GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Point2D();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Point2D[] s) {
    return s.GetNumericArray();
    }
    public override Point2D[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Point2D[] s = new Point2D[m.Length / 2];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Point2D"; } }
}

public class Point_stub : NamedArrayStub<Point,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Point s) {
    return s.GetNumericArray();
    }
    public override Point GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Point();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Point[] s) {
    return s.GetNumericArray();
    }
    public override Point[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Point[] s = new Point[m.Length / 3];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Point"; } }
}

public class Size2D_stub : NamedArrayStub<Size2D,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Size2D s) {
    return s.GetNumericArray();
    }
    public override Size2D GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 2) throw new DataTypeException("Invalid namedarray array");
    var s = new Size2D();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Size2D[] s) {
    return s.GetNumericArray();
    }
    public override Size2D[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 2 != 0) throw new DataTypeException("Invalid namedarray array");
    Size2D[] s = new Size2D[m.Length / 2];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Size2D"; } }
}

public class Size_stub : NamedArrayStub<Size,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Size s) {
    return s.GetNumericArray();
    }
    public override Size GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Size();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Size[] s) {
    return s.GetNumericArray();
    }
    public override Size[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Size[] s = new Size[m.Length / 3];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Size"; } }
}

public class Rect_stub : NamedArrayStub<Rect,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Rect s) {
    return s.GetNumericArray();
    }
    public override Rect GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Rect();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Rect[] s) {
    return s.GetNumericArray();
    }
    public override Rect[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Rect[] s = new Rect[m.Length / 4];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Rect"; } }
}

public class Box_stub : NamedArrayStub<Box,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Box s) {
    return s.GetNumericArray();
    }
    public override Box GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Box();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Box[] s) {
    return s.GetNumericArray();
    }
    public override Box[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Box[] s = new Box[m.Length / 6];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Box"; } }
}

public class Quaternion_stub : NamedArrayStub<Quaternion,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Quaternion s) {
    return s.GetNumericArray();
    }
    public override Quaternion GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Quaternion();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Quaternion[] s) {
    return s.GetNumericArray();
    }
    public override Quaternion[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Quaternion[] s = new Quaternion[m.Length / 4];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Quaternion"; } }
}

public class Plane_stub : NamedArrayStub<Plane,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Plane s) {
    return s.GetNumericArray();
    }
    public override Plane GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 4) throw new DataTypeException("Invalid namedarray array");
    var s = new Plane();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Plane[] s) {
    return s.GetNumericArray();
    }
    public override Plane[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 4 != 0) throw new DataTypeException("Invalid namedarray array");
    Plane[] s = new Plane[m.Length / 4];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Plane"; } }
}

public class Transform_stub : NamedArrayStub<Transform,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Transform s) {
    return s.GetNumericArray();
    }
    public override Transform GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 7) throw new DataTypeException("Invalid namedarray array");
    var s = new Transform();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Transform[] s) {
    return s.GetNumericArray();
    }
    public override Transform[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 7 != 0) throw new DataTypeException("Invalid namedarray array");
    Transform[] s = new Transform[m.Length / 7];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Transform"; } }
}

public class Pose_stub : NamedArrayStub<Pose,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Pose s) {
    return s.GetNumericArray();
    }
    public override Pose GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 7) throw new DataTypeException("Invalid namedarray array");
    var s = new Pose();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Pose[] s) {
    return s.GetNumericArray();
    }
    public override Pose[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 7 != 0) throw new DataTypeException("Invalid namedarray array");
    Pose[] s = new Pose[m.Length / 7];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Pose"; } }
}

public class Pose2D_stub : NamedArrayStub<Pose2D,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Pose2D s) {
    return s.GetNumericArray();
    }
    public override Pose2D GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 3) throw new DataTypeException("Invalid namedarray array");
    var s = new Pose2D();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Pose2D[] s) {
    return s.GetNumericArray();
    }
    public override Pose2D[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 3 != 0) throw new DataTypeException("Invalid namedarray array");
    Pose2D[] s = new Pose2D[m.Length / 3];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Pose2D"; } }
}

public class SpatialVelocity_stub : NamedArrayStub<SpatialVelocity,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref SpatialVelocity s) {
    return s.GetNumericArray();
    }
    public override SpatialVelocity GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialVelocity();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(SpatialVelocity[] s) {
    return s.GetNumericArray();
    }
    public override SpatialVelocity[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialVelocity[] s = new SpatialVelocity[m.Length / 6];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.SpatialVelocity"; } }
}

public class SpatialAcceleration_stub : NamedArrayStub<SpatialAcceleration,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref SpatialAcceleration s) {
    return s.GetNumericArray();
    }
    public override SpatialAcceleration GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialAcceleration();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(SpatialAcceleration[] s) {
    return s.GetNumericArray();
    }
    public override SpatialAcceleration[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialAcceleration[] s = new SpatialAcceleration[m.Length / 6];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.SpatialAcceleration"; } }
}

public class Wrench_stub : NamedArrayStub<Wrench,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref Wrench s) {
    return s.GetNumericArray();
    }
    public override Wrench GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 6) throw new DataTypeException("Invalid namedarray array");
    var s = new Wrench();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(Wrench[] s) {
    return s.GetNumericArray();
    }
    public override Wrench[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 6 != 0) throw new DataTypeException("Invalid namedarray array");
    Wrench[] s = new Wrench[m.Length / 6];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.Wrench"; } }
}

public class SpatialInertia_stub : NamedArrayStub<SpatialInertia,double> {
    public override double[] GetNumericArrayFromNamedArrayStruct(ref SpatialInertia s) {
    return s.GetNumericArray();
    }
    public override SpatialInertia GetNamedArrayStructFromNumericArray(double[] m) {
    if (m.Length != 10) throw new DataTypeException("Invalid namedarray array");
    var s = new SpatialInertia();
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override double[] GetNumericArrayFromNamedArray(SpatialInertia[] s) {
    return s.GetNumericArray();
    }
    public override SpatialInertia[] GetNamedArrayFromNumericArray(double[] m) {
    if (m.Length % 10 != 0) throw new DataTypeException("Invalid namedarray array");
    SpatialInertia[] s = new SpatialInertia[m.Length / 10];
    var a = new ArraySegment<double>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.geometry.SpatialInertia"; } }
}

public static class RRExtensions
{
    public static double[] GetNumericArray(this Vector2[] s)
    {
    var a=new ArraySegment<double>(new double[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector2[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector2[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Vector3[] s)
    {
    var a=new ArraySegment<double>(new double[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector3[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector3[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Vector6[] s)
    {
    var a=new ArraySegment<double>(new double[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Vector6[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Vector6[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Point2D[] s)
    {
    var a=new ArraySegment<double>(new double[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Point2D[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Point2D[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Point[] s)
    {
    var a=new ArraySegment<double>(new double[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Point[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Point[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Size2D[] s)
    {
    var a=new ArraySegment<double>(new double[2 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Size2D[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 2*i,2);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Size2D[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 2 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 2*i,2);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Size[] s)
    {
    var a=new ArraySegment<double>(new double[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Size[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Size[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Rect[] s)
    {
    var a=new ArraySegment<double>(new double[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Rect[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Rect[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Box[] s)
    {
    var a=new ArraySegment<double>(new double[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Box[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Box[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Quaternion[] s)
    {
    var a=new ArraySegment<double>(new double[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Quaternion[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Quaternion[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Plane[] s)
    {
    var a=new ArraySegment<double>(new double[4 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Plane[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Plane[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 4 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 4*i,4);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Transform[] s)
    {
    var a=new ArraySegment<double>(new double[7 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Transform[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 7*i,7);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Transform[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 7*i,7);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Pose[] s)
    {
    var a=new ArraySegment<double>(new double[7 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Pose[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 7*i,7);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Pose[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 7 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 7*i,7);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Pose2D[] s)
    {
    var a=new ArraySegment<double>(new double[3 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Pose2D[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Pose2D[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 3 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 3*i,3);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this SpatialVelocity[] s)
    {
    var a=new ArraySegment<double>(new double[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialVelocity[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialVelocity[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this SpatialAcceleration[] s)
    {
    var a=new ArraySegment<double>(new double[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialAcceleration[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialAcceleration[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this Wrench[] s)
    {
    var a=new ArraySegment<double>(new double[6 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this Wrench[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this Wrench[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 6 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 6*i,6);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
    public static double[] GetNumericArray(this SpatialInertia[] s)
    {
    var a=new ArraySegment<double>(new double[10 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this SpatialInertia[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 10 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 10*i,10);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this SpatialInertia[] s, ref ArraySegment<double> a)
    {
    if(a.Count < 10 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<double>(a.Array, a.Offset + 10*i,10);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}

namespace com.robotraconteur.uuid
{
[RobotRaconteurNamedArrayElementTypeAndCount("com.robotraconteur.uuid.UUID",typeof(byte), 16)]
public struct UUID
{
    public byte[] uuid_bytes;
    public byte[] GetNumericArray()
    {
    var a=new ArraySegment<byte>(new byte[16]);
    GetNumericArray(ref a);
    return a.Array;
    }
    public void GetNumericArray(ref ArraySegment<byte> a)
    {
    if(a.Count < 16) throw new ArgumentException("ArraySegment invalid length");
    Array.Copy(this.uuid_bytes, 0, a.Array, a.Offset + 0, 16);
    }
    public void AssignFromNumericArray(ref ArraySegment<byte> a)
    {
    if(a.Count < 16) throw new ArgumentException("ArraySegment invalid length");
    Array.Copy(a.Array, a.Offset + 0, this.uuid_bytes, 0, 16);
    }
}

}

namespace com.robotraconteur.uuid
{
public class com__robotraconteur__uuidFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.uuid\n\nstdver 0.9\n\nnamedarray UUID\nfield uint8[16] uuid_bytes\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.uuid";}
    public UUID_stub UUID_stubentry;
    public com__robotraconteur__uuidFactory() : this(null,null) {}
    public com__robotraconteur__uuidFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    UUID_stubentry=new UUID_stub();
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    if (objecttype=="UUID")
    return UUID_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class UUID_stub : NamedArrayStub<UUID,byte> {
    public override byte[] GetNumericArrayFromNamedArrayStruct(ref UUID s) {
    return s.GetNumericArray();
    }
    public override UUID GetNamedArrayStructFromNumericArray(byte[] m) {
    if (m.Length != 16) throw new DataTypeException("Invalid namedarray array");
    var s = new UUID();
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override byte[] GetNumericArrayFromNamedArray(UUID[] s) {
    return s.GetNumericArray();
    }
    public override UUID[] GetNamedArrayFromNumericArray(byte[] m) {
    if (m.Length % 16 != 0) throw new DataTypeException("Invalid namedarray array");
    UUID[] s = new UUID[m.Length / 16];
    var a = new ArraySegment<byte>(m);
    s.AssignFromNumericArray(ref a);
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.uuid.UUID"; } }
}

public static class RRExtensions
{
    public static byte[] GetNumericArray(this UUID[] s)
    {
    var a=new ArraySegment<byte>(new byte[16 * s.Length]);
    s.GetNumericArray(ref a);
    return a.Array;
    }
    public static void GetNumericArray(this UUID[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 16 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 16*i,16);
    s[i].GetNumericArray(ref a1);
    }
    }
    public static void AssignFromNumericArray(this UUID[] s, ref ArraySegment<byte> a)
    {
    if(a.Count < 16 * s.Length) throw new ArgumentException("ArraySegment invalid length");
    for (int i=0; i<s.Length; i++)
    {
    var a1 = new ArraySegment<byte>(a.Array, a.Offset + 16*i,16);
    s[i].AssignFromNumericArray(ref a1);
    }
    }
}
}

namespace com.robotraconteur.sensordata
{
[RobotRaconteurServiceStruct("com.robotraconteur.sensordata.SensorDataHeader")]
public class SensorDataHeader
{
    public com.robotraconteur.datetime.DateTimeUTC ts;
    public ulong seqno;
    public SensorDataSourceInfo source_info;
}

[RobotRaconteurServiceStruct("com.robotraconteur.sensordata.SensorDataSourceInfo")]
public class SensorDataSourceInfo
{
    public com.robotraconteur.identifier.Identifier source;
    public com.robotraconteur.geometry.Pose source_world_pose;
    public string source_config_nonce;
    public Dictionary<string,object> source_params;
    public Dictionary<string,object> extended;
}

}

namespace com.robotraconteur.sensordata
{
public class com__robotraconteur__sensordataFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.sensordata\n\nstdver 0.9\n\nimport com.robotraconteur.datetime\nimport com.robotraconteur.identifier\nimport com.robotraconteur.geometry\n\nusing com.robotraconteur.datetime.DateTimeUTC\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.geometry.Pose\n\nstruct SensorDataHeader\nfield DateTimeUTC ts\nfield uint64 seqno\nfield SensorDataSourceInfo source_info\nend\n\nstruct SensorDataSourceInfo\nfield Identifier source\nfield Pose source_world_pose\nfield string source_config_nonce\nfield varvalue{string} source_params\nfield varvalue{string} extended\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.sensordata";}
    public SensorDataHeader_stub SensorDataHeader_stubentry;
    public SensorDataSourceInfo_stub SensorDataSourceInfo_stubentry;
    public com__robotraconteur__sensordataFactory() : this(null,null) {}
    public com__robotraconteur__sensordataFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    SensorDataHeader_stubentry=new SensorDataHeader_stub(this,this.node,this.context);
    SensorDataSourceInfo_stubentry=new SensorDataSourceInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="SensorDataHeader")
    return SensorDataHeader_stubentry;
    if (objecttype=="SensorDataSourceInfo")
    return SensorDataSourceInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class SensorDataHeader_stub : IStructureStub {
    public SensorDataHeader_stub(com__robotraconteur__sensordataFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__sensordataFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    SensorDataHeader s = (SensorDataHeader)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.DateTimeUTC>(rr_node, rr_context, "ts",ref s.ts));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "source_info",s.source_info));
    return new MessageElementStructure("com.robotraconteur.sensordata.SensorDataHeader",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    SensorDataHeader s=new SensorDataHeader();
    s.ts =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.DateTimeUTC>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"ts"));
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"seqno")));
    s.source_info =MessageElementUtil.UnpackStructure<SensorDataSourceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"source_info"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class SensorDataSourceInfo_stub : IStructureStub {
    public SensorDataSourceInfo_stub(com__robotraconteur__sensordataFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__sensordataFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    SensorDataSourceInfo s = (SensorDataSourceInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "source",s.source));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "source_world_pose",ref s.source_world_pose));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("source_config_nonce",s.source_config_nonce));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "source_params",s.source_params));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.sensordata.SensorDataSourceInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    SensorDataSourceInfo s=new SensorDataSourceInfo();
    s.source =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"source"));
    s.source_world_pose =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"source_world_pose"));
    s.source_config_nonce =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"source_config_nonce"));
    s.source_params =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"source_params"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.device
{
[RobotRaconteurServiceStruct("com.robotraconteur.device.DeviceOption")]
public class DeviceOption
{
    public com.robotraconteur.identifier.Identifier option_identifier;
    public List<DeviceSubOption> suboptions;
}

[RobotRaconteurServiceStruct("com.robotraconteur.device.DeviceSubOption")]
public class DeviceSubOption
{
    public string suboption_name;
    public double suboption_level;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.device.DeviceCapability")]
public class DeviceCapability
{
    public com.robotraconteur.identifier.Identifier capability_identifier;
    public List<DeviceSubCapability> subcapabilities;
}

[RobotRaconteurServiceStruct("com.robotraconteur.device.DeviceSubCapability")]
public class DeviceSubCapability
{
    public string subcapability_name;
    public double subcapability_level;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.device.DeviceClass")]
public class DeviceClass
{
    public com.robotraconteur.identifier.Identifier class_identifier;
    public List<string> subclasses;
}

[RobotRaconteurServiceStruct("com.robotraconteur.device.DeviceInfo")]
public class DeviceInfo
{
    public com.robotraconteur.identifier.Identifier device;
    public com.robotraconteur.identifier.Identifier parent_device;
    public com.robotraconteur.identifier.Identifier manufacturer;
    public com.robotraconteur.identifier.Identifier model;
    public List<DeviceOption> options;
    public List<DeviceCapability> capabilities;
    public string serial_number;
    public List<DeviceClass> device_classes;
    public string user_description;
    public com.robotraconteur.resource.ResourceIdentifier description_resource;
    public List<string> implemented_types;
    public com.robotraconteur.geometry.NamedPose device_origin_pose;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.device.BillboardDevice")]
public interface BillboardDevice
{
    Task<DeviceInfo> get_device_info(CancellationToken cancel=default(CancellationToken));
    Task set_device_info(DeviceInfo value, CancellationToken cancel=default(CancellationToken));
}

}

namespace com.robotraconteur.device
{
public class com__robotraconteur__deviceFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.device\n\nstdver 0.9\n\nimport com.robotraconteur.identifier\nimport com.robotraconteur.resource\nimport com.robotraconteur.geometry\n\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.resource.ResourceIdentifier\nusing com.robotraconteur.geometry.NamedPose\n\nstruct DeviceOption\nfield Identifier option_identifier\nfield DeviceSubOption{list} suboptions\nend\n\nstruct DeviceSubOption\nfield string suboption_name\nfield double suboption_level\nfield varvalue{string} extended\nend\n\nstruct DeviceCapability\nfield Identifier capability_identifier\nfield DeviceSubCapability{list} subcapabilities\nend\n\nstruct DeviceSubCapability\nfield string subcapability_name\nfield double subcapability_level\nfield varvalue{string} extended\nend\n\nstruct DeviceClass\nfield Identifier class_identifier\nfield string{list} subclasses\nend\n\nstruct DeviceInfo\nfield Identifier device\nfield Identifier parent_device\nfield Identifier manufacturer\nfield Identifier model\nfield DeviceOption{list} options\nfield DeviceCapability{list} capabilities\nfield string serial_number\nfield DeviceClass{list} device_classes\nfield string user_description\nfield ResourceIdentifier description_resource\nfield string{list} implemented_types\nfield NamedPose device_origin_pose\nfield varvalue{string} extended\nend\n\nobject BillboardDevice\nproperty DeviceInfo device_info [readonly,nolock]\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.device";}
    public DeviceOption_stub DeviceOption_stubentry;
    public DeviceSubOption_stub DeviceSubOption_stubentry;
    public DeviceCapability_stub DeviceCapability_stubentry;
    public DeviceSubCapability_stub DeviceSubCapability_stubentry;
    public DeviceClass_stub DeviceClass_stubentry;
    public DeviceInfo_stub DeviceInfo_stubentry;
    public com__robotraconteur__deviceFactory() : this(null,null) {}
    public com__robotraconteur__deviceFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    DeviceOption_stubentry=new DeviceOption_stub(this,this.node,this.context);
    DeviceSubOption_stubentry=new DeviceSubOption_stub(this,this.node,this.context);
    DeviceCapability_stubentry=new DeviceCapability_stub(this,this.node,this.context);
    DeviceSubCapability_stubentry=new DeviceSubCapability_stub(this,this.node,this.context);
    DeviceClass_stubentry=new DeviceClass_stub(this,this.node,this.context);
    DeviceInfo_stubentry=new DeviceInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="DeviceOption")
    return DeviceOption_stubentry;
    if (objecttype=="DeviceSubOption")
    return DeviceSubOption_stubentry;
    if (objecttype=="DeviceCapability")
    return DeviceCapability_stubentry;
    if (objecttype=="DeviceSubCapability")
    return DeviceSubCapability_stubentry;
    if (objecttype=="DeviceClass")
    return DeviceClass_stubentry;
    if (objecttype=="DeviceInfo")
    return DeviceInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "BillboardDevice":
    return new BillboardDevice_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "BillboardDevice":
    return new BillboardDevice_skel(path,(BillboardDevice)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class DeviceOption_stub : IStructureStub {
    public DeviceOption_stub(com__robotraconteur__deviceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__deviceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    DeviceOption s = (DeviceOption)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "option_identifier",s.option_identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<DeviceSubOption>(rr_node, rr_context, "suboptions",s.suboptions));
    return new MessageElementStructure("com.robotraconteur.device.DeviceOption",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    DeviceOption s=new DeviceOption();
    s.option_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"option_identifier"));
    s.suboptions =MessageElementUtil.UnpackList<DeviceSubOption>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"suboptions"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class DeviceSubOption_stub : IStructureStub {
    public DeviceSubOption_stub(com__robotraconteur__deviceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__deviceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    DeviceSubOption s = (DeviceSubOption)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("suboption_name",s.suboption_name));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("suboption_level",s.suboption_level));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.device.DeviceSubOption",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    DeviceSubOption s=new DeviceSubOption();
    s.suboption_name =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"suboption_name"));
    s.suboption_level =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"suboption_level")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class DeviceCapability_stub : IStructureStub {
    public DeviceCapability_stub(com__robotraconteur__deviceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__deviceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    DeviceCapability s = (DeviceCapability)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "capability_identifier",s.capability_identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<DeviceSubCapability>(rr_node, rr_context, "subcapabilities",s.subcapabilities));
    return new MessageElementStructure("com.robotraconteur.device.DeviceCapability",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    DeviceCapability s=new DeviceCapability();
    s.capability_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"capability_identifier"));
    s.subcapabilities =MessageElementUtil.UnpackList<DeviceSubCapability>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"subcapabilities"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class DeviceSubCapability_stub : IStructureStub {
    public DeviceSubCapability_stub(com__robotraconteur__deviceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__deviceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    DeviceSubCapability s = (DeviceSubCapability)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("subcapability_name",s.subcapability_name));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("subcapability_level",s.subcapability_level));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.device.DeviceSubCapability",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    DeviceSubCapability s=new DeviceSubCapability();
    s.subcapability_name =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"subcapability_name"));
    s.subcapability_level =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"subcapability_level")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class DeviceClass_stub : IStructureStub {
    public DeviceClass_stub(com__robotraconteur__deviceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__deviceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    DeviceClass s = (DeviceClass)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "class_identifier",s.class_identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "subclasses",s.subclasses));
    return new MessageElementStructure("com.robotraconteur.device.DeviceClass",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    DeviceClass s=new DeviceClass();
    s.class_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"class_identifier"));
    s.subclasses =MessageElementUtil.UnpackList<string>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"subclasses"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class DeviceInfo_stub : IStructureStub {
    public DeviceInfo_stub(com__robotraconteur__deviceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__deviceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    DeviceInfo s = (DeviceInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device",s.device));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parent_device",s.parent_device));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "manufacturer",s.manufacturer));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "model",s.model));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<DeviceOption>(rr_node, rr_context, "options",s.options));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<DeviceCapability>(rr_node, rr_context, "capabilities",s.capabilities));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("serial_number",s.serial_number));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<DeviceClass>(rr_node, rr_context, "device_classes",s.device_classes));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("user_description",s.user_description));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "description_resource",s.description_resource));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "implemented_types",s.implemented_types));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device_origin_pose",s.device_origin_pose));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.device.DeviceInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    DeviceInfo s=new DeviceInfo();
    s.device =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device"));
    s.parent_device =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parent_device"));
    s.manufacturer =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"manufacturer"));
    s.model =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"model"));
    s.options =MessageElementUtil.UnpackList<DeviceOption>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"options"));
    s.capabilities =MessageElementUtil.UnpackList<DeviceCapability>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"capabilities"));
    s.serial_number =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"serial_number"));
    s.device_classes =MessageElementUtil.UnpackList<DeviceClass>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_classes"));
    s.user_description =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"user_description"));
    s.description_resource =MessageElementUtil.UnpackStructure<com.robotraconteur.resource.ResourceIdentifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"description_resource"));
    s.implemented_types =MessageElementUtil.UnpackList<string>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"implemented_types"));
    s.device_origin_pose =MessageElementUtil.UnpackStructure<com.robotraconteur.geometry.NamedPose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_origin_pose"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class BillboardDevice_stub : ServiceStub , BillboardDevice {
    public BillboardDevice_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<DeviceInfo> get_device_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "device_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<DeviceInfo>(rr_node, rr_context, me);
        }
    public async Task set_device_info(DeviceInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"device_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class BillboardDevice_skel : ServiceSkel {
    protected BillboardDevice obj;
    public BillboardDevice_skel(string p,BillboardDevice o,ServerContext c) : base(p,o,c) { obj=(BillboardDevice)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "device_info":
    {
    DeviceInfo ret=await obj.get_device_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "device_info":
    {
    await obj.set_device_info(MessageElementUtil.UnpackStructure<DeviceInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(BillboardDevice)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(BillboardDevice)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    BillboardDevice castobj=(BillboardDevice)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(BillboardDevice)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "device_info") return true;
    return false;
    }
}
public class BillboardDevice_default_impl : BillboardDevice{
    public virtual Task<DeviceInfo> get_device_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_device_info(DeviceInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.datetime
{
[RobotRaconteurServiceStruct("com.robotraconteur.datetime.DateTimeLocal")]
public class DateTimeLocal
{
    public ClockInfo clock_info;
    public long seconds;
    public int nanoseconds;
    public int utc_offset_seconds;
    public string timezone_name;
}

[RobotRaconteurServicePod("com.robotraconteur.datetime.ClockInfo")]
public struct ClockInfo
{
    public int clock_type;
    public com.robotraconteur.uuid.UUID clock_uuid;
}

[RobotRaconteurServicePod("com.robotraconteur.datetime.DateTimeUTC")]
public struct DateTimeUTC
{
    public ClockInfo clock_info;
    public long seconds;
    public int nanoseconds;
}

[RobotRaconteurServicePod("com.robotraconteur.datetime.Duration")]
public struct Duration
{
    public ClockInfo clock_info;
    public long seconds;
    public int nanoseconds;
}

public static class com__robotraconteur__datetimeConstants  {
    public const string EPOCH_ISO8601="1970-01-01T00:00:00Z";
}
    public enum ClockTypeCode
    {
    unknown = 0,
    default_ = 1,
    system_rtc_clock = 2,
    system_ntp_clock = 3,
    system_ptp_clock = 4,
    system_other_clock = 5,
    sim_clock_realtime = 6,
    sim_clock_scaled = 7,
    aux_0 = 0x1000,
    aux_1 = 0x1001,
    aux_2 = 0x1002,
    aux_3 = 0x1003,
    aux_4 = 0x1004,
    aux_5 = 0x1005,
    aux_6 = 0x1006,
    aux_7 = 0x1007
    };
}

namespace com.robotraconteur.datetime
{
public class com__robotraconteur__datetimeFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.datetime\n\nstdver 0.9\n\nimport com.robotraconteur.uuid\nusing com.robotraconteur.uuid.UUID\n\nconstant string EPOCH_ISO8601 \"1970-01-01T00:00:00Z\"\n\nenum ClockTypeCode\nunknown = 0,\ndefault,\nsystem_rtc_clock,\nsystem_ntp_clock,\nsystem_ptp_clock,\nsystem_other_clock,\nsim_clock_realtime,\nsim_clock_scaled,\naux_0 = 0x1000,\naux_1,\naux_2,\naux_3,\naux_4,\naux_5,\naux_6,\naux_7\nend\n\npod ClockInfo\nfield int32 clock_type\nfield UUID clock_uuid\nend\n\npod DateTimeUTC\nfield ClockInfo clock_info\nfield int64 seconds\nfield int32 nanoseconds\nend\n\nstruct DateTimeLocal\nfield ClockInfo clock_info\nfield int64 seconds\nfield int32 nanoseconds\nfield int32 utc_offset_seconds\nfield string timezone_name\nend\n\npod Duration\nfield ClockInfo clock_info\nfield int64 seconds\nfield int32 nanoseconds\nend\n\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.datetime";}
    public DateTimeLocal_stub DateTimeLocal_stubentry;
    public ClockInfo_stub ClockInfo_stubentry;
    public DateTimeUTC_stub DateTimeUTC_stubentry;
    public Duration_stub Duration_stubentry;
    public com__robotraconteur__datetimeFactory() : this(null,null) {}
    public com__robotraconteur__datetimeFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    DateTimeLocal_stubentry=new DateTimeLocal_stub(this,this.node,this.context);
    ClockInfo_stubentry=new ClockInfo_stub(this,this.node,this.context);
    DateTimeUTC_stubentry=new DateTimeUTC_stub(this,this.node,this.context);
    Duration_stubentry=new Duration_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="DateTimeLocal")
    return DateTimeLocal_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    if (objecttype=="ClockInfo")
    return ClockInfo_stubentry;
    if (objecttype=="DateTimeUTC")
    return DateTimeUTC_stubentry;
    if (objecttype=="Duration")
    return Duration_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class DateTimeLocal_stub : IStructureStub {
    public DateTimeLocal_stub(com__robotraconteur__datetimeFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__datetimeFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    DateTimeLocal s = (DateTimeLocal)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<ClockInfo>(rr_node, rr_context, "clock_info",ref s.clock_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<long>("seconds",s.seconds));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("nanoseconds",s.nanoseconds));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("utc_offset_seconds",s.utc_offset_seconds));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("timezone_name",s.timezone_name));
    return new MessageElementStructure("com.robotraconteur.datetime.DateTimeLocal",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    DateTimeLocal s=new DateTimeLocal();
    s.clock_info =MessageElementUtil.UnpackPodFromArray<ClockInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"clock_info"));
    s.seconds =(MessageElementUtil.UnpackScalar<long>(MessageElement.FindElement(m.Elements,"seconds")));
    s.nanoseconds =(MessageElementUtil.UnpackScalar<int>(MessageElement.FindElement(m.Elements,"nanoseconds")));
    s.utc_offset_seconds =(MessageElementUtil.UnpackScalar<int>(MessageElement.FindElement(m.Elements,"utc_offset_seconds")));
    s.timezone_name =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"timezone_name"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class ClockInfo_stub : PodStub<ClockInfo> {
    public ClockInfo_stub(com__robotraconteur__datetimeFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__datetimeFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public override MessageElementPod PackPod(ref ClockInfo s1) {
    List<MessageElement> m=new List<MessageElement>();
    ClockInfo s = (ClockInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("clock_type",s.clock_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.uuid.UUID>(rr_node, rr_context, "clock_uuid",ref s.clock_uuid));
    return new MessageElementPod(m);
    }
    public override ClockInfo UnpackPod(MessageElementPod m) {
    if (m == null ) throw new NullReferenceException("Pod must not be null");
    ClockInfo s = new ClockInfo();
    s.clock_type =(MessageElementUtil.UnpackScalar<int>(MessageElement.FindElement(m.Elements,"clock_type")));
    s.clock_uuid =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.uuid.UUID>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"clock_uuid"));
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.datetime.ClockInfo"; } }
}

public class DateTimeUTC_stub : PodStub<DateTimeUTC> {
    public DateTimeUTC_stub(com__robotraconteur__datetimeFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__datetimeFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public override MessageElementPod PackPod(ref DateTimeUTC s1) {
    List<MessageElement> m=new List<MessageElement>();
    DateTimeUTC s = (DateTimeUTC)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<ClockInfo>(rr_node, rr_context, "clock_info",ref s.clock_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<long>("seconds",s.seconds));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("nanoseconds",s.nanoseconds));
    return new MessageElementPod(m);
    }
    public override DateTimeUTC UnpackPod(MessageElementPod m) {
    if (m == null ) throw new NullReferenceException("Pod must not be null");
    DateTimeUTC s = new DateTimeUTC();
    s.clock_info =MessageElementUtil.UnpackPodFromArray<ClockInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"clock_info"));
    s.seconds =(MessageElementUtil.UnpackScalar<long>(MessageElement.FindElement(m.Elements,"seconds")));
    s.nanoseconds =(MessageElementUtil.UnpackScalar<int>(MessageElement.FindElement(m.Elements,"nanoseconds")));
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.datetime.DateTimeUTC"; } }
}

public class Duration_stub : PodStub<Duration> {
    public Duration_stub(com__robotraconteur__datetimeFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__datetimeFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public override MessageElementPod PackPod(ref Duration s1) {
    List<MessageElement> m=new List<MessageElement>();
    Duration s = (Duration)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<ClockInfo>(rr_node, rr_context, "clock_info",ref s.clock_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<long>("seconds",s.seconds));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("nanoseconds",s.nanoseconds));
    return new MessageElementPod(m);
    }
    public override Duration UnpackPod(MessageElementPod m) {
    if (m == null ) throw new NullReferenceException("Pod must not be null");
    Duration s = new Duration();
    s.clock_info =MessageElementUtil.UnpackPodFromArray<ClockInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"clock_info"));
    s.seconds =(MessageElementUtil.UnpackScalar<long>(MessageElement.FindElement(m.Elements,"seconds")));
    s.nanoseconds =(MessageElementUtil.UnpackScalar<int>(MessageElement.FindElement(m.Elements,"nanoseconds")));
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.datetime.Duration"; } }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.identifier
{
[RobotRaconteurServiceStruct("com.robotraconteur.identifier.Identifier")]
public class Identifier
{
    public string name;
    public com.robotraconteur.uuid.UUID uuid;
}

}

namespace com.robotraconteur.identifier
{
public class com__robotraconteur__identifierFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.identifier\n\nstdver 0.9\n\nimport com.robotraconteur.uuid\n\nusing com.robotraconteur.uuid.UUID\n\nstruct Identifier\nfield string name\nfield UUID uuid\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.identifier";}
    public Identifier_stub Identifier_stubentry;
    public com__robotraconteur__identifierFactory() : this(null,null) {}
    public com__robotraconteur__identifierFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    Identifier_stubentry=new Identifier_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="Identifier")
    return Identifier_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class Identifier_stub : IStructureStub {
    public Identifier_stub(com__robotraconteur__identifierFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__identifierFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    Identifier s = (Identifier)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("name",s.name));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.uuid.UUID>(rr_node, rr_context, "uuid",ref s.uuid));
    return new MessageElementStructure("com.robotraconteur.identifier.Identifier",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    Identifier s=new Identifier();
    s.name =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"name"));
    s.uuid =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.uuid.UUID>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"uuid"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.resource
{
[RobotRaconteurServiceStruct("com.robotraconteur.resource.ResourceIdentifier")]
public class ResourceIdentifier
{
    public com.robotraconteur.identifier.Identifier bucket;
    public string key;
}

[RobotRaconteurServiceStruct("com.robotraconteur.resource.BucketInfo")]
public class BucketInfo
{
    public com.robotraconteur.identifier.Identifier identifier;
    public List<string> keys;
}

[RobotRaconteurServiceStruct("com.robotraconteur.resource.ResourceInfo")]
public class ResourceInfo
{
    public ResourceIdentifier identifier;
    public string key;
    public com.robotraconteur.datetime.DateTimeUTC created;
    public com.robotraconteur.datetime.DateTimeUTC modified;
    public ulong total_size;
    public string description;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.resource.Resource")]
public class Resource
{
    public ResourceInfo info;
    public byte[] data;
}

[RobotRaconteurServiceStruct("com.robotraconteur.resource.ResourcePart")]
public class ResourcePart
{
    public ResourceInfo info;
    public ulong data_offset;
    public byte[] data;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.resource.ResourceReadOnlyStorage")]
public interface ResourceReadOnlyStorage
{
    Task<List<BucketInfo>> get_resource_bucket_info(CancellationToken cancel=default(CancellationToken));
    Task set_resource_bucket_info(List<BucketInfo> value, CancellationToken cancel=default(CancellationToken));
    Task<ResourceInfo> resource_get_info(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken));
    Task<Generator2<ResourcePart>> resource_get(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken));
    Task<Generator2<ResourcePart>> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier,CancellationToken rr_cancel=default(CancellationToken));
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.resource.ResourceStorage")]
public interface ResourceStorage : ResourceReadOnlyStorage
{
    Task<List<BucketInfo>> get_resource_bucket_info(CancellationToken cancel=default(CancellationToken));
    Task set_resource_bucket_info(List<BucketInfo> value, CancellationToken cancel=default(CancellationToken));
    Task<ResourceInfo> resource_get_info(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken));
    Task<Generator2<ResourcePart>> resource_get(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken));
    Task<Generator2<ResourcePart>> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier,CancellationToken rr_cancel=default(CancellationToken));
    Task resource_bucket_add(com.robotraconteur.identifier.Identifier bucket_identifier,CancellationToken rr_cancel=default(CancellationToken));
    Task resource_bucket_delete(com.robotraconteur.identifier.Identifier bucket_identifier,CancellationToken rr_cancel=default(CancellationToken));
    Task<Generator3<ResourcePart>> resource_set(ResourceIdentifier identifier, bool overrite,CancellationToken rr_cancel=default(CancellationToken));
    Task resource_delete(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken));
}

}

namespace com.robotraconteur.resource
{
public class com__robotraconteur__resourceFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.resource\n\nstdver 0.9\n\nimport com.robotraconteur.uuid\nimport com.robotraconteur.datetime\nimport com.robotraconteur.identifier\n\nusing com.robotraconteur.uuid.UUID\nusing com.robotraconteur.datetime.DateTimeUTC\nusing com.robotraconteur.identifier.Identifier\n\nstruct ResourceIdentifier\nfield Identifier bucket\nfield string key\nend\n\nstruct BucketInfo\nfield Identifier identifier\nfield string{list} keys\nend\n\nstruct ResourceInfo\nfield ResourceIdentifier identifier\nfield string key\nfield DateTimeUTC created\nfield DateTimeUTC modified\nfield uint64 total_size\nfield string description\nfield varvalue{string} extended\nend\n\nstruct Resource\nfield ResourceInfo info\nfield uint8[] data\nend\n\nstruct ResourcePart\nfield ResourceInfo info\nfield uint64 data_offset\nfield uint8[] data\nend\n\nobject ResourceReadOnlyStorage\nproperty BucketInfo{list} resource_bucket_info [readonly,nolock]\nfunction ResourceInfo resource_get_info(ResourceIdentifier identifier)\nfunction ResourcePart{generator} resource_get(ResourceIdentifier identifier)\nfunction ResourcePart{generator} resource_get_all(Identifier bucket_identifier)\nend\n\nobject ResourceStorage\nimplements ResourceReadOnlyStorage\nproperty BucketInfo{list} resource_bucket_info [readonly,nolock]\nfunction ResourceInfo resource_get_info(ResourceIdentifier identifier)\nfunction ResourcePart{generator} resource_get(ResourceIdentifier identifier)\nfunction ResourcePart{generator} resource_get_all(Identifier bucket_identifier)\nfunction void resource_bucket_add(Identifier bucket_identifier)\nfunction void resource_bucket_delete(Identifier bucket_identifier)\nfunction void resource_set(ResourceIdentifier identifier, bool overrite, ResourcePart{generator} resource)\nfunction void resource_delete(ResourceIdentifier identifier)\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.resource";}
    public ResourceIdentifier_stub ResourceIdentifier_stubentry;
    public BucketInfo_stub BucketInfo_stubentry;
    public ResourceInfo_stub ResourceInfo_stubentry;
    public Resource_stub Resource_stubentry;
    public ResourcePart_stub ResourcePart_stubentry;
    public com__robotraconteur__resourceFactory() : this(null,null) {}
    public com__robotraconteur__resourceFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    ResourceIdentifier_stubentry=new ResourceIdentifier_stub(this,this.node,this.context);
    BucketInfo_stubentry=new BucketInfo_stub(this,this.node,this.context);
    ResourceInfo_stubentry=new ResourceInfo_stub(this,this.node,this.context);
    Resource_stubentry=new Resource_stub(this,this.node,this.context);
    ResourcePart_stubentry=new ResourcePart_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ResourceIdentifier")
    return ResourceIdentifier_stubentry;
    if (objecttype=="BucketInfo")
    return BucketInfo_stubentry;
    if (objecttype=="ResourceInfo")
    return ResourceInfo_stubentry;
    if (objecttype=="Resource")
    return Resource_stubentry;
    if (objecttype=="ResourcePart")
    return ResourcePart_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "ResourceReadOnlyStorage":
    return new ResourceReadOnlyStorage_stub(path, context);
    case "ResourceStorage":
    return new ResourceStorage_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "ResourceReadOnlyStorage":
    return new ResourceReadOnlyStorage_skel(path,(ResourceReadOnlyStorage)obj,context);
    case "ResourceStorage":
    return new ResourceStorage_skel(path,(ResourceStorage)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ResourceIdentifier_stub : IStructureStub {
    public ResourceIdentifier_stub(com__robotraconteur__resourceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__resourceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ResourceIdentifier s = (ResourceIdentifier)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "bucket",s.bucket));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("key",s.key));
    return new MessageElementStructure("com.robotraconteur.resource.ResourceIdentifier",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ResourceIdentifier s=new ResourceIdentifier();
    s.bucket =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"bucket"));
    s.key =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"key"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class BucketInfo_stub : IStructureStub {
    public BucketInfo_stub(com__robotraconteur__resourceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__resourceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    BucketInfo s = (BucketInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "identifier",s.identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "keys",s.keys));
    return new MessageElementStructure("com.robotraconteur.resource.BucketInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    BucketInfo s=new BucketInfo();
    s.identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"identifier"));
    s.keys =MessageElementUtil.UnpackList<string>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"keys"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class ResourceInfo_stub : IStructureStub {
    public ResourceInfo_stub(com__robotraconteur__resourceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__resourceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ResourceInfo s = (ResourceInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "identifier",s.identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("key",s.key));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.DateTimeUTC>(rr_node, rr_context, "created",ref s.created));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackPodToArray<com.robotraconteur.datetime.DateTimeUTC>(rr_node, rr_context, "modified",ref s.modified));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("total_size",s.total_size));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("description",s.description));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.resource.ResourceInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ResourceInfo s=new ResourceInfo();
    s.identifier =MessageElementUtil.UnpackStructure<ResourceIdentifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"identifier"));
    s.key =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"key"));
    s.created =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.DateTimeUTC>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"created"));
    s.modified =MessageElementUtil.UnpackPodFromArray<com.robotraconteur.datetime.DateTimeUTC>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"modified"));
    s.total_size =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"total_size")));
    s.description =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"description"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Resource_stub : IStructureStub {
    public Resource_stub(com__robotraconteur__resourceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__resourceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    Resource s = (Resource)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "info",s.info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("data",s.data));
    return new MessageElementStructure("com.robotraconteur.resource.Resource",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    Resource s=new Resource();
    s.info =MessageElementUtil.UnpackStructure<ResourceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"info"));
    s.data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class ResourcePart_stub : IStructureStub {
    public ResourcePart_stub(com__robotraconteur__resourceFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__resourceFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ResourcePart s = (ResourcePart)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "info",s.info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("data_offset",s.data_offset));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("data",s.data));
    return new MessageElementStructure("com.robotraconteur.resource.ResourcePart",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ResourcePart s=new ResourcePart();
    s.info =MessageElementUtil.UnpackStructure<ResourceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"info"));
    s.data_offset =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"data_offset")));
    s.data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class ResourceReadOnlyStorage_stub : ServiceStub , ResourceReadOnlyStorage {
    public ResourceReadOnlyStorage_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<List<BucketInfo>> get_resource_bucket_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "resource_bucket_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<BucketInfo>(rr_node, rr_context, me);
        }
    public async Task set_resource_bucket_info(List<BucketInfo> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"resource_bucket_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<BucketInfo>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<ResourceInfo> resource_get_info(ResourceIdentifier identifier, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_get_info");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "identifier",identifier));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackStructure<ResourceInfo>(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task<Generator2<ResourcePart>> resource_get(ResourceIdentifier identifier, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_get");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "identifier",identifier));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator2Client<ResourcePart>("resource_get",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task<Generator2<ResourcePart>> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_get_all");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "bucket_identifier",bucket_identifier));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator2Client<ResourcePart>("resource_get_all",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class ResourceStorage_stub : ServiceStub , ResourceStorage {
    public ResourceStorage_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<List<BucketInfo>> get_resource_bucket_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "resource_bucket_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<BucketInfo>(rr_node, rr_context, me);
        }
    public async Task set_resource_bucket_info(List<BucketInfo> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"resource_bucket_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<BucketInfo>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<ResourceInfo> resource_get_info(ResourceIdentifier identifier, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_get_info");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "identifier",identifier));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackStructure<ResourceInfo>(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task<Generator2<ResourcePart>> resource_get(ResourceIdentifier identifier, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_get");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "identifier",identifier));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator2Client<ResourcePart>("resource_get",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task<Generator2<ResourcePart>> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_get_all");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "bucket_identifier",bucket_identifier));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator2Client<ResourcePart>("resource_get_all",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task resource_bucket_add(com.robotraconteur.identifier.Identifier bucket_identifier, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_bucket_add");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "bucket_identifier",bucket_identifier));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task resource_bucket_delete(com.robotraconteur.identifier.Identifier bucket_identifier, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_bucket_delete");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "bucket_identifier",bucket_identifier));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task<Generator3<ResourcePart>> resource_set(ResourceIdentifier identifier, bool overrite, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_set");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "identifier",identifier));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<bool>("overrite",overrite));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator3Client<ResourcePart>("resource_set",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task resource_delete(ResourceIdentifier identifier, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"resource_delete");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "identifier",identifier));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class ResourceReadOnlyStorage_skel : ServiceSkel {
    protected ResourceReadOnlyStorage obj;
    public ResourceReadOnlyStorage_skel(string p,ResourceReadOnlyStorage o,ServerContext c) : base(p,o,c) { obj=(ResourceReadOnlyStorage)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "resource_bucket_info":
    {
    List<BucketInfo> ret=await obj.get_resource_bucket_info();
    mr.AddElement(MessageElementUtil.PackListType<BucketInfo>(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "resource_bucket_info":
    {
    await obj.set_resource_bucket_info(MessageElementUtil.UnpackList<BucketInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "resource_get_info":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"identifier"));
    ResourceInfo rr_ret=await this.obj.resource_get_info(identifier, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "resource_get":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"identifier"));
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator2<ResourcePart> rr_ret=await this.obj.resource_get(identifier);
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator2Server<ResourcePart>(rr_ret,"resource_get",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "resource_get_all":
    {
    com.robotraconteur.identifier.Identifier bucket_identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"bucket_identifier"));
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator2<ResourcePart> rr_ret=await this.obj.resource_get_all(bucket_identifier);
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator2Server<ResourcePart>(rr_ret,"resource_get_all",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ResourceReadOnlyStorage)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ResourceReadOnlyStorage)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    ResourceReadOnlyStorage castobj=(ResourceReadOnlyStorage)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ResourceReadOnlyStorage)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "resource_bucket_info") return true;
    return false;
    }
}
public class ResourceStorage_skel : ServiceSkel {
    protected ResourceStorage obj;
    public ResourceStorage_skel(string p,ResourceStorage o,ServerContext c) : base(p,o,c) { obj=(ResourceStorage)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "resource_bucket_info":
    {
    List<BucketInfo> ret=await obj.get_resource_bucket_info();
    mr.AddElement(MessageElementUtil.PackListType<BucketInfo>(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "resource_bucket_info":
    {
    await obj.set_resource_bucket_info(MessageElementUtil.UnpackList<BucketInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "resource_get_info":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"identifier"));
    ResourceInfo rr_ret=await this.obj.resource_get_info(identifier, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "resource_get":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"identifier"));
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator2<ResourcePart> rr_ret=await this.obj.resource_get(identifier);
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator2Server<ResourcePart>(rr_ret,"resource_get",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "resource_get_all":
    {
    com.robotraconteur.identifier.Identifier bucket_identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"bucket_identifier"));
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator2<ResourcePart> rr_ret=await this.obj.resource_get_all(bucket_identifier);
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator2Server<ResourcePart>(rr_ret,"resource_get_all",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "resource_bucket_add":
    {
    com.robotraconteur.identifier.Identifier bucket_identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"bucket_identifier"));
    await this.obj.resource_bucket_add(bucket_identifier, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "resource_bucket_delete":
    {
    com.robotraconteur.identifier.Identifier bucket_identifier=MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"bucket_identifier"));
    await this.obj.resource_bucket_delete(bucket_identifier, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "resource_set":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"identifier"));
    bool overrite=(MessageElementUtil.UnpackScalar<bool>(MessageElementUtil.FindElement(rr_m,"overrite")));
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator3<ResourcePart> rr_ret=await this.obj.resource_set(identifier, overrite);
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator3Server<ResourcePart>(rr_ret,"resource_set",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "resource_delete":
    {
    ResourceIdentifier identifier=MessageElementUtil.UnpackStructure<ResourceIdentifier>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"identifier"));
    await this.obj.resource_delete(identifier, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(ResourceStorage)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(ResourceStorage)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    ResourceStorage castobj=(ResourceStorage)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(ResourceStorage)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "resource_bucket_info") return true;
    return false;
    }
}
public class ResourceReadOnlyStorage_default_impl : ResourceReadOnlyStorage{
    public virtual Task<List<BucketInfo>> get_resource_bucket_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_resource_bucket_info(List<BucketInfo> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<ResourceInfo> resource_get_info(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator2<ResourcePart>> resource_get(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator2<ResourcePart>> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public class ResourceStorage_default_impl : ResourceStorage{
    public virtual Task<List<BucketInfo>> get_resource_bucket_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_resource_bucket_info(List<BucketInfo> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<ResourceInfo> resource_get_info(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator2<ResourcePart>> resource_get(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator2<ResourcePart>> resource_get_all(com.robotraconteur.identifier.Identifier bucket_identifier,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task resource_bucket_add(com.robotraconteur.identifier.Identifier bucket_identifier,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task resource_bucket_delete(com.robotraconteur.identifier.Identifier bucket_identifier,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator3<ResourcePart>> resource_set(ResourceIdentifier identifier, bool overrite,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task resource_delete(ResourceIdentifier identifier,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.signal
{
[RobotRaconteurServiceStruct("com.robotraconteur.signal.SignalInfo")]
public class SignalInfo
{
    public com.robotraconteur.identifier.Identifier signal_identifier;
    public com.robotraconteur.device.DeviceClass signal_class;
    public List<com.robotraconteur.units.SIUnit> units;
    public com.robotraconteur.datatype.DataType data_type;
    public SignalType signal_type;
    public SignalAccessLevel access_level;
    public uint[] address;
    public string user_description;
    public double max_update_rate;
    public object min_value;
    public object max_value;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.signal.Signal")]
public interface Signal
{
    Task<SignalInfo> get_signal_info(CancellationToken cancel=default(CancellationToken));
    Task set_signal_info(SignalInfo value, CancellationToken cancel=default(CancellationToken));
    Task<uint> get_update_downsample(CancellationToken cancel=default(CancellationToken));
    Task set_update_downsample(uint value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken));
    Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken));
    Wire<object> signal_value { get; set; }
    Wire<object> signal_command { get; set; }
    Wire<double[]> signal_value_vec { get; set; }
    Wire<double[]> signal_command_vec { get; set; }
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.signal.SignalDevice")]
public interface SignalDevice
{
    Task<com.robotraconteur.device.DeviceInfo> get_device_info(CancellationToken cancel=default(CancellationToken));
    Task set_device_info(com.robotraconteur.device.DeviceInfo value, CancellationToken cancel=default(CancellationToken));
    Task<List<SignalInfo>> get_signal_info(CancellationToken cancel=default(CancellationToken));
    Task set_signal_info(List<SignalInfo> value, CancellationToken cancel=default(CancellationToken));
    Task<Signal> get_signals(int ind, CancellationToken rr_cancel=default(CancellationToken));
}

public static class com__robotraconteur__signalConstants  {
}
    public enum SignalType
    {
    unknown = 0,
    digital = 1,
    analog = 2,
    digital_port = 3,
    analog_port = 4,
    vector3 = 5,
    vector6 = 6,
    wrench = 7,
    pose = 8,
    transform = 9,
    other = 10
    };
    public enum SignalAccessLevel
    {
    undefined = 0,
    internal_ = 1,
    restricted = 2,
    readonly_ = 3,
    all = 4
    };
}

namespace com.robotraconteur.signal
{
public class com__robotraconteur__signalFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.signal\n\nstdver 0.9\n\nimport com.robotraconteur.identifier\nimport com.robotraconteur.datatype\nimport com.robotraconteur.device\nimport com.robotraconteur.units\n\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.datatype.DataType\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.device.DeviceClass\nusing com.robotraconteur.units.SIUnit\n\nenum SignalType\nunknown = 0,\ndigital = 1,\nanalog,\ndigital_port,\nanalog_port,\nvector3,\nvector6,\nwrench,\npose,\ntransform,\nother\nend\n\nenum SignalAccessLevel\nundefined = 0,\ninternal,\nrestricted,\nreadonly,\nall\nend\n\nstruct SignalInfo\nfield Identifier signal_identifier\nfield DeviceClass signal_class\nfield SIUnit{list} units\nfield DataType data_type\nfield SignalType signal_type\nfield SignalAccessLevel access_level\nfield uint32[] address\nfield string user_description\nfield double max_update_rate\nfield varvalue min_value\nfield varvalue max_value\nfield varvalue{string} extended\nend\n\nobject Signal\nproperty SignalInfo signal_info [readonly,nolock]\nwire varvalue signal_value [readonly]\nwire varvalue signal_command [writeonly]\nwire double[] signal_value_vec [readonly]\nwire double[] signal_command_vec [writeonly]\nproperty uint32 update_downsample [perclient]\nproperty double update_rate [readonly]\nend\n\nobject SignalDevice\nproperty DeviceInfo device_info [readonly,nolock]\nproperty SignalInfo{list} signal_info [readonly,nolock]\nobjref Signal{int32} signals\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.signal";}
    public SignalInfo_stub SignalInfo_stubentry;
    public com__robotraconteur__signalFactory() : this(null,null) {}
    public com__robotraconteur__signalFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    SignalInfo_stubentry=new SignalInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="SignalInfo")
    return SignalInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Signal":
    return new Signal_stub(path, context);
    case "SignalDevice":
    return new SignalDevice_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Signal":
    return new Signal_skel(path,(Signal)obj,context);
    case "SignalDevice":
    return new SignalDevice_skel(path,(SignalDevice)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class SignalInfo_stub : IStructureStub {
    public SignalInfo_stub(com__robotraconteur__signalFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__signalFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    SignalInfo s = (SignalInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "signal_identifier",s.signal_identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "signal_class",s.signal_class));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.units.SIUnit>(rr_node, rr_context, "units",s.units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "data_type",s.data_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<SignalType>("signal_type",s.signal_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<SignalAccessLevel>("access_level",s.access_level));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<uint>("address",s.address));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("user_description",s.user_description));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("max_update_rate",s.max_update_rate));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "min_value",s.min_value));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "max_value",s.max_value));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.signal.SignalInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    SignalInfo s=new SignalInfo();
    s.signal_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"signal_identifier"));
    s.signal_class =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceClass>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"signal_class"));
    s.units =MessageElementUtil.UnpackList<com.robotraconteur.units.SIUnit>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"units"));
    s.data_type =MessageElementUtil.UnpackStructure<com.robotraconteur.datatype.DataType>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"data_type"));
    s.signal_type =MessageElementUtil.UnpackEnum<SignalType>(MessageElement.FindElement(m.Elements,"signal_type"));
    s.access_level =MessageElementUtil.UnpackEnum<SignalAccessLevel>(MessageElement.FindElement(m.Elements,"access_level"));
    s.address =MessageElementUtil.UnpackArray<uint>(MessageElement.FindElement(m.Elements,"address"));
    s.user_description =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"user_description"));
    s.max_update_rate =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"max_update_rate")));
    s.min_value =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"min_value"));
    s.max_value =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"max_value"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Signal_stub : ServiceStub , Signal {
    private Wire<object> rr_signal_value;
    private Wire<object> rr_signal_command;
    private Wire<double[]> rr_signal_value_vec;
    private Wire<double[]> rr_signal_command_vec;
    public Signal_stub(string path, ClientContext c) : base(path, c) {
    rr_signal_value=new WireClient<object>("signal_value", this);
    rr_signal_command=new WireClient<object>("signal_command", this);
    rr_signal_value_vec=new WireClient<double[]>("signal_value_vec", this);
    rr_signal_command_vec=new WireClient<double[]>("signal_command_vec", this);
    }
    public async Task<SignalInfo> get_signal_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "signal_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<SignalInfo>(rr_node, rr_context, me);
        }
    public async Task set_signal_info(SignalInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"signal_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<uint> get_update_downsample(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_downsample");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<uint>(me));
        }
    public async Task set_update_downsample(uint value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_downsample");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_rate");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_rate");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public Wire<object> signal_value {
    get { return rr_signal_value;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<object> signal_command {
    get { return rr_signal_command;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> signal_value_vec {
    get { return rr_signal_value_vec;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> signal_command_vec {
    get { return rr_signal_command_vec;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "signal_value":
    this.rr_signal_value.WirePacketReceived(m);
    break;
    case "signal_command":
    this.rr_signal_command.WirePacketReceived(m);
    break;
    case "signal_value_vec":
    this.rr_signal_value_vec.WirePacketReceived(m);
    break;
    case "signal_command_vec":
    this.rr_signal_command_vec.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class SignalDevice_stub : ServiceStub , SignalDevice {
    public SignalDevice_stub(string path, ClientContext c) : base(path, c) {
    }
    public async Task<com.robotraconteur.device.DeviceInfo> get_device_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "device_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, me);
        }
    public async Task set_device_info(com.robotraconteur.device.DeviceInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"device_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<SignalInfo>> get_signal_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "signal_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<SignalInfo>(rr_node, rr_context, me);
        }
    public async Task set_signal_info(List<SignalInfo> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"signal_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<SignalInfo>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    default:
    break;
    }
    }
    public async Task<Signal> get_signals(int ind, CancellationToken cancel=default(CancellationToken)) {
    return (Signal)await FindObjRefTyped("signals",ind.ToString(),"com.robotraconteur.signal.Signal",cancel);
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
}
public class Signal_skel : ServiceSkel {
    protected Signal obj;
    public Signal_skel(string p,Signal o,ServerContext c) : base(p,o,c) { obj=(Signal)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "signal_info":
    {
    SignalInfo ret=await obj.get_signal_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "update_downsample":
    {
    uint ret=await obj.get_update_downsample();
    mr.AddElement(MessageElementUtil.PackScalar<uint>("value",ret));
    break;
    }
    case "update_rate":
    {
    double ret=await obj.get_update_rate();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "signal_info":
    {
    await obj.set_signal_info(MessageElementUtil.UnpackStructure<SignalInfo>(rr_node, rr_context, me));
    break;
    }
    case "update_downsample":
    {
    await obj.set_update_downsample((MessageElementUtil.UnpackScalar<uint>(me)));
    break;
    }
    case "update_rate":
    {
    await obj.set_update_rate((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Signal)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Signal)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private WireServer<object> rr_signal_value;
    private WireServer<object> rr_signal_command;
    private WireServer<double[]> rr_signal_value_vec;
    private WireServer<double[]> rr_signal_command_vec;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Signal castobj=(Signal)o;
    this.rr_signal_value=new WireServer<object>("signal_value",this);
    this.rr_signal_command=new WireServer<object>("signal_command",this);
    this.rr_signal_value_vec=new WireServer<double[]>("signal_value_vec",this);
    this.rr_signal_command_vec=new WireServer<double[]>("signal_command_vec",this);
    castobj.signal_value=this.rr_signal_value;
    castobj.signal_command=this.rr_signal_command;
    castobj.signal_value_vec=this.rr_signal_value_vec;
    castobj.signal_command_vec=this.rr_signal_command_vec;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Signal)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "signal_value":
    return await this.rr_signal_value.WireCommand(m,e);
    case "signal_command":
    return await this.rr_signal_command.WireCommand(m,e);
    case "signal_value_vec":
    return await this.rr_signal_value_vec.WireCommand(m,e);
    case "signal_command_vec":
    return await this.rr_signal_command_vec.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "signal_value":
    this.rr_signal_value.WirePacketReceived(m,e);
    break;
    case "signal_command":
    this.rr_signal_command.WirePacketReceived(m,e);
    break;
    case "signal_value_vec":
    this.rr_signal_value_vec.WirePacketReceived(m,e);
    break;
    case "signal_command_vec":
    this.rr_signal_command_vec.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "signal_info") return true;
    return false;
    }
}
public class SignalDevice_skel : ServiceSkel {
    protected SignalDevice obj;
    public SignalDevice_skel(string p,SignalDevice o,ServerContext c) : base(p,o,c) { obj=(SignalDevice)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "device_info":
    {
    com.robotraconteur.device.DeviceInfo ret=await obj.get_device_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "signal_info":
    {
    List<SignalInfo> ret=await obj.get_signal_info();
    mr.AddElement(MessageElementUtil.PackListType<SignalInfo>(rr_node, rr_context, "value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "device_info":
    {
    await obj.set_device_info(MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, me));
    break;
    }
    case "signal_info":
    {
    await obj.set_signal_info(MessageElementUtil.UnpackList<SignalInfo>(rr_node, rr_context, me));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    case "signals": {
    return await obj.get_signals(Int32.Parse(ind));
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(SignalDevice)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(SignalDevice)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    SignalDevice castobj=(SignalDevice)o;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(SignalDevice)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "device_info") return true;
    if (m.MemberName == "signal_info") return true;
    return false;
    }
}
public class Signal_default_impl : Signal{
    protected WireBroadcaster<object> rrvar_signal_value;
    protected WireUnicastReceiver<object> rrvar_signal_command;
    protected WireBroadcaster<double[]> rrvar_signal_value_vec;
    protected WireUnicastReceiver<double[]> rrvar_signal_command_vec;
    public virtual Task<SignalInfo> get_signal_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_signal_info(SignalInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<uint> get_update_downsample(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_downsample(uint value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Wire<object> signal_value {
    get { return rrvar_signal_value.Wire;  }
    set {
    if (rrvar_signal_value!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_signal_value= new WireBroadcaster<object>(value);
    }
    }
    public virtual Wire<object> signal_command {
    get { return rrvar_signal_command.Wire;  }
    set {
    if (rrvar_signal_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_signal_command= new WireUnicastReceiver<object>(value);
    }
    }
    public virtual Wire<double[]> signal_value_vec {
    get { return rrvar_signal_value_vec.Wire;  }
    set {
    if (rrvar_signal_value_vec!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_signal_value_vec= new WireBroadcaster<double[]>(value);
    }
    }
    public virtual Wire<double[]> signal_command_vec {
    get { return rrvar_signal_command_vec.Wire;  }
    set {
    if (rrvar_signal_command_vec!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_signal_command_vec= new WireUnicastReceiver<double[]>(value);
    }
    }
}
public class SignalDevice_default_impl : SignalDevice{
    public virtual Task<com.robotraconteur.device.DeviceInfo> get_device_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_device_info(com.robotraconteur.device.DeviceInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<SignalInfo>> get_signal_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_signal_info(List<SignalInfo> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Signal> get_signals(int ind, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
}
public static class RRExtensions
{
}
}

namespace com.robotraconteur.datatype
{
[RobotRaconteurServiceStruct("com.robotraconteur.datatype.DataType")]
public class DataType
{
    public string name;
    public DataTypeCode type_code;
    public string type_string;
    public ArrayTypeCode array_type_code;
    public bool array_var_len;
    public uint[] array_len;
    public ContainerTypeCode container_type_code;
}

public static class com__robotraconteur__datatypeConstants  {
}
    public enum DataTypeCode
    {
    void_c = 0,
    double_c = 1,
    single_c = 2,
    int8_c = 3,
    uint8_c = 4,
    int16_c = 5,
    uint16_c = 6,
    int32_c = 7,
    uint32_c = 8,
    int64_c = 9,
    uint64_c = 10,
    string_c = 11,
    cdouble_c = 12,
    csingle_c = 13,
    bool_c = 14,
    structure_c = 101,
    vector_c = 102,
    dictionary_c = 103,
    object_c = 104,
    varvalue_c = 105,
    varobject_c = 106,
    list_c = 108,
    pod_c = 109,
    pod_array_c = 110,
    pod_multidimarray_c = 111,
    enum_c = 112,
    namedtype_c = 113,
    namedarray_c = 114,
    namedarray_array_c = 115,
    namedarray_multidimarray_c = 116,
    multidimarray_c = 117
    };
    public enum ArrayTypeCode
    {
    none_c = 0,
    array_c = 1,
    multidimarray_c = 2
    };
    public enum ContainerTypeCode
    {
    none_c = 0,
    list_c = 1,
    map_int32_c = 2,
    map_string_c = 3,
    generator_c = 4
    };
}

namespace com.robotraconteur.datatype
{
public class com__robotraconteur__datatypeFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.datatype\n\nstdver 0.9\n\nenum DataTypeCode\nvoid_c = 0,\ndouble_c,\nsingle_c,\nint8_c,\nuint8_c,\nint16_c,\nuint16_c,\nint32_c,\nuint32_c,\nint64_c,\nuint64_c,\nstring_c,\ncdouble_c,\ncsingle_c,\nbool_c,\nstructure_c = 101,\nvector_c,\ndictionary_c,\nobject_c,\nvarvalue_c,\nvarobject_c,\nlist_c = 108,\npod_c,\npod_array_c,\npod_multidimarray_c,\nenum_c,\nnamedtype_c,\nnamedarray_c,\nnamedarray_array_c,\nnamedarray_multidimarray_c,\nmultidimarray_c\nend\n\nenum ArrayTypeCode\nnone_c = 0,\narray_c,\nmultidimarray_c\nend\n\nenum ContainerTypeCode\nnone_c = 0,\nlist_c,\nmap_int32_c,\nmap_string_c,\ngenerator_c\nend\n\nstruct DataType\nfield string name\nfield DataTypeCode type_code\nfield string type_string\nfield ArrayTypeCode array_type_code\nfield bool array_var_len\nfield uint32[] array_len\nfield ContainerTypeCode container_type_code\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.datatype";}
    public DataType_stub DataType_stubentry;
    public com__robotraconteur__datatypeFactory() : this(null,null) {}
    public com__robotraconteur__datatypeFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    DataType_stubentry=new DataType_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="DataType")
    return DataType_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class DataType_stub : IStructureStub {
    public DataType_stub(com__robotraconteur__datatypeFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__datatypeFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    DataType s = (DataType)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("name",s.name));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<DataTypeCode>("type_code",s.type_code));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("type_string",s.type_string));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<ArrayTypeCode>("array_type_code",s.array_type_code));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("array_var_len",s.array_var_len));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<uint>("array_len",s.array_len));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<ContainerTypeCode>("container_type_code",s.container_type_code));
    return new MessageElementStructure("com.robotraconteur.datatype.DataType",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    DataType s=new DataType();
    s.name =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"name"));
    s.type_code =MessageElementUtil.UnpackEnum<DataTypeCode>(MessageElement.FindElement(m.Elements,"type_code"));
    s.type_string =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"type_string"));
    s.array_type_code =MessageElementUtil.UnpackEnum<ArrayTypeCode>(MessageElement.FindElement(m.Elements,"array_type_code"));
    s.array_var_len =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"array_var_len")));
    s.array_len =MessageElementUtil.UnpackArray<uint>(MessageElement.FindElement(m.Elements,"array_len"));
    s.container_type_code =MessageElementUtil.UnpackEnum<ContainerTypeCode>(MessageElement.FindElement(m.Elements,"container_type_code"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.units
{
[RobotRaconteurServicePod("com.robotraconteur.units.SIUnit")]
public struct SIUnit
{
    public double coeff;
    public sbyte m;
    public sbyte s;
    public sbyte kg;
    public sbyte A;
    public sbyte K;
    public sbyte mol;
    public sbyte cd;
    public sbyte rad;
    public sbyte sr;
    public sbyte prefix;
}

}

namespace com.robotraconteur.units
{
public class com__robotraconteur__unitsFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.units\n\nstdver 0.9\n\npod SIUnit\nfield double coeff\nfield int8 m\nfield int8 s\nfield int8 kg\nfield int8 A\nfield int8 K\nfield int8 mol\nfield int8 cd\nfield int8 rad\nfield int8 sr\nfield int8 prefix\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.units";}
    public SIUnit_stub SIUnit_stubentry;
    public com__robotraconteur__unitsFactory() : this(null,null) {}
    public com__robotraconteur__unitsFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    SIUnit_stubentry=new SIUnit_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    if (objecttype=="SIUnit")
    return SIUnit_stubentry;
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class SIUnit_stub : PodStub<SIUnit> {
    public SIUnit_stub(com__robotraconteur__unitsFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__unitsFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public override MessageElementPod PackPod(ref SIUnit s1) {
    List<MessageElement> m=new List<MessageElement>();
    SIUnit s = (SIUnit)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("coeff",s.coeff));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("m",s.m));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("s",s.s));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("kg",s.kg));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("A",s.A));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("K",s.K));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("mol",s.mol));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("cd",s.cd));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("rad",s.rad));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("sr",s.sr));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<sbyte>("prefix",s.prefix));
    return new MessageElementPod(m);
    }
    public override SIUnit UnpackPod(MessageElementPod m) {
    if (m == null ) throw new NullReferenceException("Pod must not be null");
    SIUnit s = new SIUnit();
    s.coeff =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"coeff")));
    s.m =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"m")));
    s.s =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"s")));
    s.kg =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"kg")));
    s.A =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"A")));
    s.K =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"K")));
    s.mol =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"mol")));
    s.cd =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"cd")));
    s.rad =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"rad")));
    s.sr =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"sr")));
    s.prefix =(MessageElementUtil.UnpackScalar<sbyte>(MessageElement.FindElement(m.Elements,"prefix")));
    return s;
    }
    public override string TypeName { get { return "com.robotraconteur.units.SIUnit"; } }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.param
{
[RobotRaconteurServiceStruct("com.robotraconteur.param.ParameterInfo")]
public class ParameterInfo
{
    public com.robotraconteur.identifier.Identifier parameter_identifier;
    public com.robotraconteur.device.DeviceClass parameter_class;
    public com.robotraconteur.datatype.DataType data_type;
    public string user_description;
    public object default_value;
    public object min_value;
    public object max_value;
    public Dictionary<string,object> enum_values;
    public Dictionary<string,object> extended;
}

}

namespace com.robotraconteur.param
{
public class com__robotraconteur__paramFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.param\n\nstdver 0.9\n\nimport com.robotraconteur.identifier\nimport com.robotraconteur.datatype\nimport com.robotraconteur.device\n\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.datatype.DataType\nusing com.robotraconteur.device.DeviceClass\n\nstruct ParameterInfo\nfield Identifier parameter_identifier\nfield DeviceClass parameter_class\nfield DataType data_type\nfield string user_description\nfield varvalue default_value\nfield varvalue min_value\nfield varvalue max_value\nfield varvalue{string} enum_values\nfield varvalue{string} extended\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.param";}
    public ParameterInfo_stub ParameterInfo_stubentry;
    public com__robotraconteur__paramFactory() : this(null,null) {}
    public com__robotraconteur__paramFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    ParameterInfo_stubentry=new ParameterInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ParameterInfo")
    return ParameterInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ParameterInfo_stub : IStructureStub {
    public ParameterInfo_stub(com__robotraconteur__paramFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__paramFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ParameterInfo s = (ParameterInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parameter_identifier",s.parameter_identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "parameter_class",s.parameter_class));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "data_type",s.data_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("user_description",s.user_description));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "default_value",s.default_value));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "min_value",s.min_value));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackVarType(rr_node, rr_context, "max_value",s.max_value));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "enum_values",s.enum_values));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.param.ParameterInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ParameterInfo s=new ParameterInfo();
    s.parameter_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parameter_identifier"));
    s.parameter_class =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceClass>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parameter_class"));
    s.data_type =MessageElementUtil.UnpackStructure<com.robotraconteur.datatype.DataType>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"data_type"));
    s.user_description =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"user_description"));
    s.default_value =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"default_value"));
    s.min_value =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"min_value"));
    s.max_value =MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElement.FindElement(m.Elements,"max_value"));
    s.enum_values =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"enum_values"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.robotics.joints
{
[RobotRaconteurServiceStruct("com.robotraconteur.robotics.joints.JointLimits")]
public class JointLimits
{
    public double lower;
    public double upper;
    public double velocity;
    public double acceleration;
    public double effort;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.joints.JointInfo")]
public class JointInfo
{
    public com.robotraconteur.identifier.Identifier joint_identifier;
    public JointType joint_type;
    public JointLimits joint_limits;
    public JointPositionUnits default_units;
    public JointEffortUnits default_effort_units;
    public bool passive;
    public Dictionary<string,object> extended;
}

public static class com__robotraconteur__robotics__jointsConstants  {
}
    public enum JointPositionUnits
    {
    implicit_ = 0,
    meter = 1,
    radian = 2,
    degree = 3,
    ticks_lin = 4,
    ticks_rot = 5,
    nanoticks_lin = 6,
    nanoticks_rot = 7
    };
    public enum JointVelocityUnits
    {
    implicit_ = 0,
    meter_second = 16,
    radian_second = 17,
    degree_second = 18,
    ticks_lin_second = 19,
    ticks_rot_second = 20,
    nanoticks_lin_second = 21,
    nanoticks_rot_second = 22
    };
    public enum JointAccelerationUnits
    {
    implicit_ = 0,
    meter_second2 = 32,
    radian_second2 = 33,
    degree_second2 = 34,
    ticks_lin_second2 = 35,
    ticks_rot_second2 = 36,
    nanoticks_lin_second2 = 37,
    nanoticks_rot_second2 = 38
    };
    public enum JointJerkUnits
    {
    implicit_ = 0,
    meter_second2 = 48,
    radian_second3 = 49,
    degree_second3 = 50,
    ticks_lin_second3 = 51,
    ticks_rot_second3 = 52,
    nanoticks_lin_second3 = 53,
    nanoticks_rot_second3 = 54
    };
    public enum JointEffortUnits
    {
    implicit_ = 0,
    newton = 64,
    newton_meter = 65,
    ampere = 66,
    volt = 67,
    pascal = 68,
    coulomb = 69,
    tesla = 70,
    weber = 71,
    meter_second2 = 72,
    radian_second2 = 73,
    degree_second2 = 74
    };
    public enum JointType
    {
    unknown = 0,
    revolute = 1,
    continuous = 2,
    prismatic = 3,
    wheel = 4,
    screw = 5,
    other = 6,
    revolute2 = 7,
    universal = 8,
    ball = 9,
    planar = 10,
    floating = 11,
    other_compound = 12
    };
}

namespace com.robotraconteur.robotics.joints
{
public class com__robotraconteur__robotics__jointsFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.robotics.joints\n\nstdver 0.9\n\nimport com.robotraconteur.units\nimport com.robotraconteur.identifier\n\nusing com.robotraconteur.units.SIUnit\nusing com.robotraconteur.identifier.Identifier\n\nenum JointPositionUnits\nimplicit = 0,\nmeter,\nradian,\ndegree,\n# ticks_lin = m/(2^20)\nticks_lin,\n# ticks_rot = rev/(2^20)\nticks_rot,\n# nanoticks_lin = nm/(2^20)\nnanoticks_lin,\n# nanoticks_rot = nrev/(2^20)\nnanoticks_rot\nend\n\nenum JointVelocityUnits\nimplicit = 0,\nmeter_second = 16,\nradian_second,\ndegree_second,\nticks_lin_second,\nticks_rot_second,\nnanoticks_lin_second,\nnanoticks_rot_second\nend\n\nenum JointAccelerationUnits\nimplicit = 0,\nmeter_second2 = 32,\nradian_second2,\ndegree_second2,\nticks_lin_second2,\nticks_rot_second2,\nnanoticks_lin_second2,\nnanoticks_rot_second2\nend\n\nenum JointJerkUnits\nimplicit = 0,\nmeter_second2 = 48,\nradian_second3,\ndegree_second3,\nticks_lin_second3,\nticks_rot_second3,\nnanoticks_lin_second3,\nnanoticks_rot_second3\nend\n\nenum JointEffortUnits\nimplicit = 0,\nnewton = 64,\nnewton_meter,\nampere,\nvolt,\npascal,\ncoulomb,\ntesla,\nweber,\nmeter_second2,\nradian_second2,\ndegree_second2\nend\n\nenum JointType\nunknown = 0,\nrevolute,\ncontinuous,\nprismatic,\nwheel,\nscrew,\nother,\n# Compound joint types\nrevolute2,\nuniversal,\nball,\nplanar,\nfloating,\nother_compound\nend\n\nstruct JointLimits\nfield double lower\nfield double upper\nfield double velocity\nfield double acceleration\nfield double effort\nend\n\nstruct JointInfo\nfield Identifier joint_identifier\nfield JointType joint_type\nfield JointLimits joint_limits\nfield JointPositionUnits default_units\nfield JointEffortUnits default_effort_units\nfield bool passive\nfield varvalue{string} extended\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.robotics.joints";}
    public JointLimits_stub JointLimits_stubentry;
    public JointInfo_stub JointInfo_stubentry;
    public com__robotraconteur__robotics__jointsFactory() : this(null,null) {}
    public com__robotraconteur__robotics__jointsFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    JointLimits_stubentry=new JointLimits_stub(this,this.node,this.context);
    JointInfo_stubentry=new JointInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="JointLimits")
    return JointLimits_stubentry;
    if (objecttype=="JointInfo")
    return JointInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class JointLimits_stub : IStructureStub {
    public JointLimits_stub(com__robotraconteur__robotics__jointsFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__jointsFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    JointLimits s = (JointLimits)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("lower",s.lower));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("upper",s.upper));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("velocity",s.velocity));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("acceleration",s.acceleration));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("effort",s.effort));
    return new MessageElementStructure("com.robotraconteur.robotics.joints.JointLimits",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    JointLimits s=new JointLimits();
    s.lower =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"lower")));
    s.upper =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"upper")));
    s.velocity =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"velocity")));
    s.acceleration =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"acceleration")));
    s.effort =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"effort")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class JointInfo_stub : IStructureStub {
    public JointInfo_stub(com__robotraconteur__robotics__jointsFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__jointsFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    JointInfo s = (JointInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "joint_identifier",s.joint_identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<JointType>("joint_type",s.joint_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "joint_limits",s.joint_limits));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<JointPositionUnits>("default_units",s.default_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<JointEffortUnits>("default_effort_units",s.default_effort_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("passive",s.passive));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.joints.JointInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    JointInfo s=new JointInfo();
    s.joint_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_identifier"));
    s.joint_type =MessageElementUtil.UnpackEnum<JointType>(MessageElement.FindElement(m.Elements,"joint_type"));
    s.joint_limits =MessageElementUtil.UnpackStructure<JointLimits>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_limits"));
    s.default_units =MessageElementUtil.UnpackEnum<JointPositionUnits>(MessageElement.FindElement(m.Elements,"default_units"));
    s.default_effort_units =MessageElementUtil.UnpackEnum<JointEffortUnits>(MessageElement.FindElement(m.Elements,"default_effort_units"));
    s.passive =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"passive")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.robotics.trajectory
{
[RobotRaconteurServiceStruct("com.robotraconteur.robotics.trajectory.JointTrajectoryWaypoint")]
public class JointTrajectoryWaypoint
{
    public double[] joint_position;
    public double[] joint_velocity;
    public double[] position_tolerance;
    public double[] velocity_tolerance;
    public double time_from_start;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.trajectory.JointTrajectory")]
public class JointTrajectory
{
    public List<string> joint_names;
    public List<com.robotraconteur.robotics.joints.JointPositionUnits> joint_units;
    public List<JointTrajectoryWaypoint> waypoints;
    public InterpolationMode interpolation_mode;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.trajectory.TrajectoryStatus")]
public class TrajectoryStatus
{
    public ulong seqno;
    public com.robotraconteur.action.ActionStatusCode action_status;
    public uint current_waypoint;
    public double trajectory_time;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.trajectory.AdvancedJointTrajectoryDeviceWaypoint")]
public class AdvancedJointTrajectoryDeviceWaypoint
{
    public List<double[]> joint_position;
    public List<double[]> joint_velocity;
    public List<double[]> joint_acceleration;
    public List<double[]> joint_jerk;
    public List<double[]> joint_effort;
    public List<double[]> position_tolerance;
    public List<double[]> velocity_tolerance;
    public Dictionary<string,object> signals;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.trajectory.AdvancedJointTrajectoryWaypoint")]
public class AdvancedJointTrajectoryWaypoint
{
    public List<AdvancedJointTrajectoryDeviceWaypoint> joints;
    public double time_from_start;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.trajectory.AdvancedJointTrajectoryDevice")]
public class AdvancedJointTrajectoryDevice
{
    public com.robotraconteur.identifier.Identifier device;
    public List<string> joint_names;
    public List<com.robotraconteur.robotics.joints.JointPositionUnits> joint_units;
    public List<com.robotraconteur.robotics.joints.JointEffortUnits> joint_effort_units;
    public InterpolationMode interpolation_mode;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.trajectory.AdvancedJointTrajectory")]
public class AdvancedJointTrajectory
{
    public List<AdvancedJointTrajectoryDevice> devices;
    public List<AdvancedJointTrajectoryWaypoint> waypoints;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.trajectory.FreeformJointTrajectoryWaypoint")]
public class FreeformJointTrajectoryWaypoint
{
    public List<object> joint_position;
    public List<object> joint_velocity;
    public List<object> position_tolerance;
    public List<object> velocity_tolerance;
    public string interpolation_mode;
    public Dictionary<string,object> signals;
    public double time_from_start;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.trajectory.FreeformJointTrajectory")]
public class FreeformJointTrajectory
{
    public List<string> joint_names;
    public List<string> joint_units;
    public List<FreeformJointTrajectoryWaypoint> waypoints;
    public Dictionary<string,object> extended;
}

public static class com__robotraconteur__robotics__trajectoryConstants  {
}
    public enum InterpolationMode
    {
    default_ = 0,
    joint = 1,
    linear = 2,
    cylindrical = 3,
    spherical = 4,
    joint_cubic_spline = 5,
    cubic_spline = 6,
    custom = 7
    };
}

namespace com.robotraconteur.robotics.trajectory
{
public class com__robotraconteur__robotics__trajectoryFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.robotics.trajectory\n\nstdver 0.9\n\nimport com.robotraconteur.robotics.joints\nimport com.robotraconteur.identifier\nimport com.robotraconteur.action\n\nusing com.robotraconteur.robotics.joints.JointPositionUnits\nusing com.robotraconteur.robotics.joints.JointEffortUnits\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.action.ActionStatusCode\n\nenum InterpolationMode\ndefault = 0,\njoint,\nlinear,\ncylindrical,\nspherical,\njoint_cubic_spline,\ncubic_spline,\ncustom\nend\n\nstruct JointTrajectoryWaypoint\nfield double[] joint_position\nfield double[] joint_velocity\nfield double[] position_tolerance\nfield double[] velocity_tolerance\nfield double time_from_start\nend\n\nstruct JointTrajectory\nfield string{list} joint_names\nfield JointPositionUnits{list} joint_units\nfield JointTrajectoryWaypoint{list} waypoints\nfield InterpolationMode interpolation_mode\nfield varvalue{string} extended\nend\n\nstruct TrajectoryStatus\nfield uint64 seqno\nfield ActionStatusCode action_status\nfield uint32 current_waypoint\nfield double trajectory_time\nend\n\nstruct AdvancedJointTrajectoryDeviceWaypoint\n# Use list for compound joints\nfield double[]{list} joint_position\nfield double[]{list} joint_velocity\nfield double[]{list} joint_acceleration\nfield double[]{list} joint_jerk\nfield double[]{list} joint_effort\nfield double[]{list} position_tolerance\nfield double[]{list} velocity_tolerance\nfield varvalue{string} signals\nend\n\nstruct AdvancedJointTrajectoryWaypoint\nfield AdvancedJointTrajectoryDeviceWaypoint{list} joints\nfield double time_from_start\nend\n\nstruct AdvancedJointTrajectoryDevice\nfield Identifier device\nfield string{list} joint_names\nfield JointPositionUnits{list} joint_units\nfield JointEffortUnits{list} joint_effort_units\nfield InterpolationMode interpolation_mode\nfield varvalue{string} extended\nend\n\nstruct AdvancedJointTrajectory\nfield AdvancedJointTrajectoryDevice{list} devices\nfield AdvancedJointTrajectoryWaypoint{list} waypoints\nfield varvalue{string} extended\nend\n\nstruct FreeformJointTrajectoryWaypoint\nfield varvalue{list} joint_position\nfield varvalue{list} joint_velocity\nfield varvalue{list} position_tolerance\nfield varvalue{list} velocity_tolerance\nfield string interpolation_mode\nfield varvalue{string} signals\nfield double time_from_start\nfield varvalue{string} extended\nend\n\nstruct FreeformJointTrajectory\nfield string{list} joint_names\nfield string{list} joint_units\nfield FreeformJointTrajectoryWaypoint{list} waypoints\nfield varvalue{string} extended\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.robotics.trajectory";}
    public JointTrajectoryWaypoint_stub JointTrajectoryWaypoint_stubentry;
    public JointTrajectory_stub JointTrajectory_stubentry;
    public TrajectoryStatus_stub TrajectoryStatus_stubentry;
    public AdvancedJointTrajectoryDeviceWaypoint_stub AdvancedJointTrajectoryDeviceWaypoint_stubentry;
    public AdvancedJointTrajectoryWaypoint_stub AdvancedJointTrajectoryWaypoint_stubentry;
    public AdvancedJointTrajectoryDevice_stub AdvancedJointTrajectoryDevice_stubentry;
    public AdvancedJointTrajectory_stub AdvancedJointTrajectory_stubentry;
    public FreeformJointTrajectoryWaypoint_stub FreeformJointTrajectoryWaypoint_stubentry;
    public FreeformJointTrajectory_stub FreeformJointTrajectory_stubentry;
    public com__robotraconteur__robotics__trajectoryFactory() : this(null,null) {}
    public com__robotraconteur__robotics__trajectoryFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    JointTrajectoryWaypoint_stubentry=new JointTrajectoryWaypoint_stub(this,this.node,this.context);
    JointTrajectory_stubentry=new JointTrajectory_stub(this,this.node,this.context);
    TrajectoryStatus_stubentry=new TrajectoryStatus_stub(this,this.node,this.context);
    AdvancedJointTrajectoryDeviceWaypoint_stubentry=new AdvancedJointTrajectoryDeviceWaypoint_stub(this,this.node,this.context);
    AdvancedJointTrajectoryWaypoint_stubentry=new AdvancedJointTrajectoryWaypoint_stub(this,this.node,this.context);
    AdvancedJointTrajectoryDevice_stubentry=new AdvancedJointTrajectoryDevice_stub(this,this.node,this.context);
    AdvancedJointTrajectory_stubentry=new AdvancedJointTrajectory_stub(this,this.node,this.context);
    FreeformJointTrajectoryWaypoint_stubentry=new FreeformJointTrajectoryWaypoint_stub(this,this.node,this.context);
    FreeformJointTrajectory_stubentry=new FreeformJointTrajectory_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="JointTrajectoryWaypoint")
    return JointTrajectoryWaypoint_stubentry;
    if (objecttype=="JointTrajectory")
    return JointTrajectory_stubentry;
    if (objecttype=="TrajectoryStatus")
    return TrajectoryStatus_stubentry;
    if (objecttype=="AdvancedJointTrajectoryDeviceWaypoint")
    return AdvancedJointTrajectoryDeviceWaypoint_stubentry;
    if (objecttype=="AdvancedJointTrajectoryWaypoint")
    return AdvancedJointTrajectoryWaypoint_stubentry;
    if (objecttype=="AdvancedJointTrajectoryDevice")
    return AdvancedJointTrajectoryDevice_stubentry;
    if (objecttype=="AdvancedJointTrajectory")
    return AdvancedJointTrajectory_stubentry;
    if (objecttype=="FreeformJointTrajectoryWaypoint")
    return FreeformJointTrajectoryWaypoint_stubentry;
    if (objecttype=="FreeformJointTrajectory")
    return FreeformJointTrajectory_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class JointTrajectoryWaypoint_stub : IStructureStub {
    public JointTrajectoryWaypoint_stub(com__robotraconteur__robotics__trajectoryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    JointTrajectoryWaypoint s = (JointTrajectoryWaypoint)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_position",s.joint_position));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_velocity",s.joint_velocity));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("position_tolerance",s.position_tolerance));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("velocity_tolerance",s.velocity_tolerance));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("time_from_start",s.time_from_start));
    return new MessageElementStructure("com.robotraconteur.robotics.trajectory.JointTrajectoryWaypoint",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    JointTrajectoryWaypoint s=new JointTrajectoryWaypoint();
    s.joint_position =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_position"));
    s.joint_velocity =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_velocity"));
    s.position_tolerance =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"position_tolerance"));
    s.velocity_tolerance =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"velocity_tolerance"));
    s.time_from_start =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"time_from_start")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class JointTrajectory_stub : IStructureStub {
    public JointTrajectory_stub(com__robotraconteur__robotics__trajectoryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    JointTrajectory s = (JointTrajectory)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "joint_names",s.joint_names));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.robotics.joints.JointPositionUnits>(rr_node, rr_context, "joint_units",s.joint_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<JointTrajectoryWaypoint>(rr_node, rr_context, "waypoints",s.waypoints));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<InterpolationMode>("interpolation_mode",s.interpolation_mode));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.trajectory.JointTrajectory",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    JointTrajectory s=new JointTrajectory();
    s.joint_names =MessageElementUtil.UnpackList<string>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_names"));
    s.joint_units =MessageElementUtil.UnpackList<com.robotraconteur.robotics.joints.JointPositionUnits>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_units"));
    s.waypoints =MessageElementUtil.UnpackList<JointTrajectoryWaypoint>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"waypoints"));
    s.interpolation_mode =MessageElementUtil.UnpackEnum<InterpolationMode>(MessageElement.FindElement(m.Elements,"interpolation_mode"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class TrajectoryStatus_stub : IStructureStub {
    public TrajectoryStatus_stub(com__robotraconteur__robotics__trajectoryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    TrajectoryStatus s = (TrajectoryStatus)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<com.robotraconteur.action.ActionStatusCode>("action_status",s.action_status));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("current_waypoint",s.current_waypoint));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("trajectory_time",s.trajectory_time));
    return new MessageElementStructure("com.robotraconteur.robotics.trajectory.TrajectoryStatus",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    TrajectoryStatus s=new TrajectoryStatus();
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"seqno")));
    s.action_status =MessageElementUtil.UnpackEnum<com.robotraconteur.action.ActionStatusCode>(MessageElement.FindElement(m.Elements,"action_status"));
    s.current_waypoint =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"current_waypoint")));
    s.trajectory_time =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"trajectory_time")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class AdvancedJointTrajectoryDeviceWaypoint_stub : IStructureStub {
    public AdvancedJointTrajectoryDeviceWaypoint_stub(com__robotraconteur__robotics__trajectoryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    AdvancedJointTrajectoryDeviceWaypoint s = (AdvancedJointTrajectoryDeviceWaypoint)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "joint_position",s.joint_position));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "joint_velocity",s.joint_velocity));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "joint_acceleration",s.joint_acceleration));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "joint_jerk",s.joint_jerk));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "joint_effort",s.joint_effort));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "position_tolerance",s.position_tolerance));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<double[]>(rr_node, rr_context, "velocity_tolerance",s.velocity_tolerance));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "signals",s.signals));
    return new MessageElementStructure("com.robotraconteur.robotics.trajectory.AdvancedJointTrajectoryDeviceWaypoint",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    AdvancedJointTrajectoryDeviceWaypoint s=new AdvancedJointTrajectoryDeviceWaypoint();
    s.joint_position =MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_position"));
    s.joint_velocity =MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_velocity"));
    s.joint_acceleration =MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_acceleration"));
    s.joint_jerk =MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_jerk"));
    s.joint_effort =MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_effort"));
    s.position_tolerance =MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"position_tolerance"));
    s.velocity_tolerance =MessageElementUtil.UnpackList<double[]>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"velocity_tolerance"));
    s.signals =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"signals"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class AdvancedJointTrajectoryWaypoint_stub : IStructureStub {
    public AdvancedJointTrajectoryWaypoint_stub(com__robotraconteur__robotics__trajectoryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    AdvancedJointTrajectoryWaypoint s = (AdvancedJointTrajectoryWaypoint)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<AdvancedJointTrajectoryDeviceWaypoint>(rr_node, rr_context, "joints",s.joints));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("time_from_start",s.time_from_start));
    return new MessageElementStructure("com.robotraconteur.robotics.trajectory.AdvancedJointTrajectoryWaypoint",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    AdvancedJointTrajectoryWaypoint s=new AdvancedJointTrajectoryWaypoint();
    s.joints =MessageElementUtil.UnpackList<AdvancedJointTrajectoryDeviceWaypoint>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joints"));
    s.time_from_start =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"time_from_start")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class AdvancedJointTrajectoryDevice_stub : IStructureStub {
    public AdvancedJointTrajectoryDevice_stub(com__robotraconteur__robotics__trajectoryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    AdvancedJointTrajectoryDevice s = (AdvancedJointTrajectoryDevice)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device",s.device));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "joint_names",s.joint_names));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.robotics.joints.JointPositionUnits>(rr_node, rr_context, "joint_units",s.joint_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.robotics.joints.JointEffortUnits>(rr_node, rr_context, "joint_effort_units",s.joint_effort_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<InterpolationMode>("interpolation_mode",s.interpolation_mode));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.trajectory.AdvancedJointTrajectoryDevice",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    AdvancedJointTrajectoryDevice s=new AdvancedJointTrajectoryDevice();
    s.device =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device"));
    s.joint_names =MessageElementUtil.UnpackList<string>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_names"));
    s.joint_units =MessageElementUtil.UnpackList<com.robotraconteur.robotics.joints.JointPositionUnits>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_units"));
    s.joint_effort_units =MessageElementUtil.UnpackList<com.robotraconteur.robotics.joints.JointEffortUnits>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_effort_units"));
    s.interpolation_mode =MessageElementUtil.UnpackEnum<InterpolationMode>(MessageElement.FindElement(m.Elements,"interpolation_mode"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class AdvancedJointTrajectory_stub : IStructureStub {
    public AdvancedJointTrajectory_stub(com__robotraconteur__robotics__trajectoryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    AdvancedJointTrajectory s = (AdvancedJointTrajectory)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<AdvancedJointTrajectoryDevice>(rr_node, rr_context, "devices",s.devices));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<AdvancedJointTrajectoryWaypoint>(rr_node, rr_context, "waypoints",s.waypoints));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.trajectory.AdvancedJointTrajectory",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    AdvancedJointTrajectory s=new AdvancedJointTrajectory();
    s.devices =MessageElementUtil.UnpackList<AdvancedJointTrajectoryDevice>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"devices"));
    s.waypoints =MessageElementUtil.UnpackList<AdvancedJointTrajectoryWaypoint>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"waypoints"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class FreeformJointTrajectoryWaypoint_stub : IStructureStub {
    public FreeformJointTrajectoryWaypoint_stub(com__robotraconteur__robotics__trajectoryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    FreeformJointTrajectoryWaypoint s = (FreeformJointTrajectoryWaypoint)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<object>(rr_node, rr_context, "joint_position",s.joint_position));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<object>(rr_node, rr_context, "joint_velocity",s.joint_velocity));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<object>(rr_node, rr_context, "position_tolerance",s.position_tolerance));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<object>(rr_node, rr_context, "velocity_tolerance",s.velocity_tolerance));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackString("interpolation_mode",s.interpolation_mode));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "signals",s.signals));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("time_from_start",s.time_from_start));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.trajectory.FreeformJointTrajectoryWaypoint",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    FreeformJointTrajectoryWaypoint s=new FreeformJointTrajectoryWaypoint();
    s.joint_position =MessageElementUtil.UnpackList<object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_position"));
    s.joint_velocity =MessageElementUtil.UnpackList<object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_velocity"));
    s.position_tolerance =MessageElementUtil.UnpackList<object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"position_tolerance"));
    s.velocity_tolerance =MessageElementUtil.UnpackList<object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"velocity_tolerance"));
    s.interpolation_mode =MessageElementUtil.UnpackString(MessageElement.FindElement(m.Elements,"interpolation_mode"));
    s.signals =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"signals"));
    s.time_from_start =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"time_from_start")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class FreeformJointTrajectory_stub : IStructureStub {
    public FreeformJointTrajectory_stub(com__robotraconteur__robotics__trajectoryFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__trajectoryFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    FreeformJointTrajectory s = (FreeformJointTrajectory)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "joint_names",s.joint_names));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<string>(rr_node, rr_context, "joint_units",s.joint_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<FreeformJointTrajectoryWaypoint>(rr_node, rr_context, "waypoints",s.waypoints));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.trajectory.FreeformJointTrajectory",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    FreeformJointTrajectory s=new FreeformJointTrajectory();
    s.joint_names =MessageElementUtil.UnpackList<string>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_names"));
    s.joint_units =MessageElementUtil.UnpackList<string>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_units"));
    s.waypoints =MessageElementUtil.UnpackList<FreeformJointTrajectoryWaypoint>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"waypoints"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.robotics.tool
{
[RobotRaconteurServiceStruct("com.robotraconteur.robotics.tool.ToolInfo")]
public class ToolInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public com.robotraconteur.geometry.Transform tcp;
    public com.robotraconteur.geometry.SpatialInertia inertia;
    public double actuation_time;
    public Dictionary<string,object> extended;
}

}

namespace com.robotraconteur.robotics.tool
{
public class com__robotraconteur__robotics__toolFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.robotics.tool\n\nstdver 0.9\n\nimport com.robotraconteur.device\nimport com.robotraconteur.geometry\n\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.geometry.Transform\nusing com.robotraconteur.geometry.SpatialInertia\n\nstruct ToolInfo\nfield DeviceInfo device_info\nfield Transform tcp\nfield SpatialInertia inertia\nfield double actuation_time\nfield varvalue{string} extended\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.robotics.tool";}
    public ToolInfo_stub ToolInfo_stubentry;
    public com__robotraconteur__robotics__toolFactory() : this(null,null) {}
    public com__robotraconteur__robotics__toolFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    ToolInfo_stubentry=new ToolInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="ToolInfo")
    return ToolInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class ToolInfo_stub : IStructureStub {
    public ToolInfo_stub(com__robotraconteur__robotics__toolFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__toolFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    ToolInfo s = (ToolInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device_info",s.device_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Transform>(rr_node, rr_context, "tcp",ref s.tcp));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.SpatialInertia>(rr_node, rr_context, "inertia",ref s.inertia));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("actuation_time",s.actuation_time));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.tool.ToolInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    ToolInfo s=new ToolInfo();
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_info"));
    s.tcp =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Transform>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"tcp"));
    s.inertia =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.SpatialInertia>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"inertia"));
    s.actuation_time =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"actuation_time")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.robotics.payload
{
[RobotRaconteurServiceStruct("com.robotraconteur.robotics.payload.PayloadInfo")]
public class PayloadInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public com.robotraconteur.geometry.SpatialInertia inertia;
    public Dictionary<string,object> extended;
}

}

namespace com.robotraconteur.robotics.payload
{
public class com__robotraconteur__robotics__payloadFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.robotics.payload\n\nstdver 0.9\n\nimport com.robotraconteur.device\nimport com.robotraconteur.geometry\n\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.geometry.Transform\nusing com.robotraconteur.geometry.SpatialInertia\n\nstruct PayloadInfo\nfield DeviceInfo device_info\nfield SpatialInertia inertia\nfield varvalue{string} extended\nend\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.robotics.payload";}
    public PayloadInfo_stub PayloadInfo_stubentry;
    public com__robotraconteur__robotics__payloadFactory() : this(null,null) {}
    public com__robotraconteur__robotics__payloadFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    PayloadInfo_stubentry=new PayloadInfo_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="PayloadInfo")
    return PayloadInfo_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class PayloadInfo_stub : IStructureStub {
    public PayloadInfo_stub(com__robotraconteur__robotics__payloadFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__payloadFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    PayloadInfo s = (PayloadInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device_info",s.device_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.SpatialInertia>(rr_node, rr_context, "inertia",ref s.inertia));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.payload.PayloadInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    PayloadInfo s=new PayloadInfo();
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_info"));
    s.inertia =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.SpatialInertia>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"inertia"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public static class RRExtensions
{
}
}

namespace com.robotraconteur.robotics.robot
{
[RobotRaconteurServiceStruct("com.robotraconteur.robotics.robot.RobotKinChainInfo")]
public class RobotKinChainInfo
{
    public com.robotraconteur.identifier.Identifier kin_chain_identifier;
    public com.robotraconteur.geometry.Vector3[] H;
    public com.robotraconteur.geometry.Vector3[] P;
    public com.robotraconteur.geometry.SpatialInertia[] link_inertias;
    public List<com.robotraconteur.identifier.Identifier> link_identifiers;
    public uint[] joint_numbers;
    public com.robotraconteur.geometry.Pose flange_pose;
    public com.robotraconteur.identifier.Identifier flange_identifier;
    public com.robotraconteur.robotics.tool.ToolInfo current_tool;
    public com.robotraconteur.robotics.payload.PayloadInfo current_payload;
    public com.robotraconteur.geometry.SpatialVelocity tcp_max_velocity;
    public com.robotraconteur.geometry.SpatialAcceleration tcp_max_acceleration;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.robot.RobotInfo")]
public class RobotInfo
{
    public com.robotraconteur.device.DeviceInfo device_info;
    public RobotType robot_type;
    public List<com.robotraconteur.robotics.joints.JointInfo> joint_info;
    public List<RobotKinChainInfo> chains;
    public uint robot_capabilities;
    public List<com.robotraconteur.signal.SignalInfo> signal_info;
    public List<com.robotraconteur.param.ParameterInfo> parameter_info;
    public ushort config_seqno;
    public Dictionary<string,object> extended;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.robot.RobotState")]
public class RobotState
{
    public ulong seqno;
    public RobotCommandMode command_mode;
    public RobotOperationalMode operational_mode;
    public RobotControllerState controller_state;
    public ulong robot_state_flags;
    public double[] joint_position;
    public double[] joint_velocity;
    public double[] joint_effort;
    public double[] joint_position_command;
    public double[] joint_velocity_command;
    public com.robotraconteur.geometry.Pose[] kin_chain_tcp;
    public com.robotraconteur.geometry.SpatialVelocity[] kin_chain_tcp_vel;
    public bool trajectory_running;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.robot.AdvancedRobotState")]
public class AdvancedRobotState
{
    public ulong seqno;
    public RobotCommandMode command_mode;
    public RobotOperationalMode operational_mode;
    public RobotControllerState controller_state;
    public ulong robot_state_flags;
    public double[] joint_position;
    public double[] joint_velocity;
    public double[] joint_effort;
    public double[] joint_position_command;
    public double[] joint_velocity_command;
    public byte[] joint_position_units;
    public byte[] joint_effort_units;
    public com.robotraconteur.geometry.Pose[] kin_chain_tcp;
    public com.robotraconteur.geometry.SpatialVelocity[] kin_chain_tcp_vel;
    public bool trajectory_running;
    public double trajectory_time;
    public double trajectory_max_time;
    public uint trajectory_current_waypoint;
    public ushort config_seqno;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.robot.RobotStateSensorData")]
public class RobotStateSensorData
{
    public com.robotraconteur.sensordata.SensorDataHeader data_header;
    public AdvancedRobotState robot_state;
}

[RobotRaconteurServiceStruct("com.robotraconteur.robotics.robot.RobotJointCommand")]
public class RobotJointCommand
{
    public ulong seqno;
    public ulong state_seqno;
    public double[] command;
    public byte[] units;
}

[RobotRaconteurServiceObjectInterface("com.robotraconteur.robotics.robot.Robot")]
public interface Robot
{
    Task<RobotInfo> get_robot_info(CancellationToken cancel=default(CancellationToken));
    Task set_robot_info(RobotInfo value, CancellationToken cancel=default(CancellationToken));
    Task<RobotCommandMode> get_command_mode(CancellationToken cancel=default(CancellationToken));
    Task set_command_mode(RobotCommandMode value, CancellationToken cancel=default(CancellationToken));
    Task<RobotOperationalMode> get_operational_mode(CancellationToken cancel=default(CancellationToken));
    Task set_operational_mode(RobotOperationalMode value, CancellationToken cancel=default(CancellationToken));
    Task<RobotControllerState> get_controller_state(CancellationToken cancel=default(CancellationToken));
    Task set_controller_state(RobotControllerState value, CancellationToken cancel=default(CancellationToken));
    Task<List<RobotErrorCategory>> get_current_errors(CancellationToken cancel=default(CancellationToken));
    Task set_current_errors(List<RobotErrorCategory> value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_speed_ratio(CancellationToken cancel=default(CancellationToken));
    Task set_speed_ratio(double value, CancellationToken cancel=default(CancellationToken));
    Task<uint> get_update_downsample(CancellationToken cancel=default(CancellationToken));
    Task set_update_downsample(uint value, CancellationToken cancel=default(CancellationToken));
    Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken));
    Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken));
    Task halt(CancellationToken rr_cancel=default(CancellationToken));
    Task enable(CancellationToken rr_cancel=default(CancellationToken));
    Task disable(CancellationToken rr_cancel=default(CancellationToken));
    Task reset_errors(CancellationToken rr_cancel=default(CancellationToken));
    Task jog_joint(double[] joint_position, double[] max_velocity, bool relative, bool wait,CancellationToken rr_cancel=default(CancellationToken));
    Task jog_cartesian(Dictionary<int,com.robotraconteur.geometry.Pose> target_pose, Dictionary<int,com.robotraconteur.geometry.SpatialVelocity> max_velocity, bool relative, bool wait,CancellationToken rr_cancel=default(CancellationToken));
    Task<Generator2<com.robotraconteur.robotics.trajectory.TrajectoryStatus>> execute_trajectory(com.robotraconteur.robotics.trajectory.JointTrajectory trajectory,CancellationToken rr_cancel=default(CancellationToken));
    Task<Generator2<com.robotraconteur.action.ActionStatusCode>> home(CancellationToken rr_cancel=default(CancellationToken));
    Task<double> getf_signal(string signal_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_signal(string signal_name, double value_,CancellationToken rr_cancel=default(CancellationToken));
    Task tool_attached(int chain, com.robotraconteur.robotics.tool.ToolInfo tool,CancellationToken rr_cancel=default(CancellationToken));
    Task tool_detached(int chain, string tool_name,CancellationToken rr_cancel=default(CancellationToken));
    Task payload_attached(int chain, com.robotraconteur.robotics.payload.PayloadInfo payload, com.robotraconteur.geometry.Pose pose,CancellationToken rr_cancel=default(CancellationToken));
    Task payload_detached(int chain, string payload_name,CancellationToken rr_cancel=default(CancellationToken));
    Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken));
    Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken));
    event Action<int, string> tool_changed;
    event Action<int, string> payload_changed;
    event Action<string> param_changed;
    Pipe<RobotStateSensorData> robot_state_sensor_data{ get; set; }
    Wire<RobotState> robot_state { get; set; }
    Wire<AdvancedRobotState> advanced_robot_state { get; set; }
    Wire<RobotJointCommand> position_command { get; set; }
    Wire<RobotJointCommand> velocity_command { get; set; }
}

public static class com__robotraconteur__robotics__robotConstants  {
}
    public enum RobotType
    {
    unknown = 0,
    serial = 1,
    dual_arm = 2,
    differential_drive = 3,
    planar = 4,
    floating = 5,
    freeform = 6,
    other = 7
    };
    public enum RobotCommandMode
    {
    invalid_state = -1,
    halt = 0,
    jog = 1,
    trajectory = 2,
    position_command = 3,
    velocity_command = 4,
    homing = 5
    };
    public enum RobotOperationalMode
    {
    undefined = 0,
    manual_reduced_speed = 1,
    manual_full_speed = 2,
    auto = 3,
    cobot = 4
    };
    public enum RobotControllerState
    {
    undefined = 0,
    init = 1,
    motor_on = 2,
    motor_off = 3,
    guard_stop = 4,
    emergency_stop = 5,
    emergency_stop_reset = 6
    };
    public enum RobotErrorCategory
    {
    unknown = 0,
    invalid_operation = 1,
    invalid_argument = 2,
    invalid_command = 3,
    invalid_mode = 4,
    hardware_fault = 5,
    software_fault = 6,
    communication_failure = 7,
    kinematic_error = 8,
    dynamic_error = 9,
    overload_error = 10,
    command_error = 11,
    user_software_error = 12,
    collision_imminent = 13,
    collision_occured = 14,
    sensor_failure = 15,
    sensor_out_of_range = 16,
    safety_violation = 17,
    workspace_violation = 18,
    workspace_intrusion = 19,
    estop_active = 20,
    guard_stop = 21
    };
    public enum RobotCapabilities
    {
    unknown = 0,
    jog_command = 0x1,
    trajectory_command = 0x2,
    position_command = 0x4,
    velocity_command = 0x8,
    homing_command = 0x10,
    software_reset_errors = 0x20,
    software_enable = 0x40
    };
    public enum RobotStateFlags
    {
    unknown = 0,
    error = 0x1,
    fatal_error = 0x2,
    estop = 0x4,
    estop_button1 = 0x8,
    estop_button2 = 0x10,
    estop_button3 = 0x20,
    estop_button4 = 0x40,
    estop_guard1 = 0x80,
    estop_guard2 = 0x100,
    estop_guard3 = 0x200,
    estop_guard4 = 0x400,
    estop_software = 0x800,
    estop_fault = 0x1000,
    estop_internal = 0x2000,
    estop_other = 0x4000,
    estop_released = 0x8000,
    enabling_switch = 0x10000,
    enabled = 0x20000,
    ready = 0x40000,
    homed = 0x80000,
    homing_required = 0x100000,
    communication_failure = 0x200000,
    valid_position_command = 0x1000000,
    valid_velocity_command = 0x2000000,
    trajectory_running = 0x4000000
    };
}

namespace com.robotraconteur.robotics.robot
{
public class com__robotraconteur__robotics__robotFactory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.robotics.robot\n\nstdver 0.9\n\nimport com.robotraconteur.geometry\nimport com.robotraconteur.sensordata\nimport com.robotraconteur.device\nimport com.robotraconteur.signal\nimport com.robotraconteur.param\nimport com.robotraconteur.robotics.joints\nimport com.robotraconteur.robotics.tool\nimport com.robotraconteur.robotics.payload\nimport com.robotraconteur.robotics.trajectory\nimport com.robotraconteur.identifier\nimport com.robotraconteur.action\n\nusing com.robotraconteur.geometry.Point\nusing com.robotraconteur.geometry.Vector3\nusing com.robotraconteur.geometry.Transform\nusing com.robotraconteur.geometry.SpatialInertia\nusing com.robotraconteur.geometry.Pose\nusing com.robotraconteur.geometry.SpatialVelocity\nusing com.robotraconteur.geometry.SpatialAcceleration\nusing com.robotraconteur.sensordata.SensorDataHeader\nusing com.robotraconteur.device.DeviceInfo\nusing com.robotraconteur.signal.SignalInfo\nusing com.robotraconteur.robotics.joints.JointInfo\nusing com.robotraconteur.robotics.tool.ToolInfo\nusing com.robotraconteur.robotics.payload.PayloadInfo\nusing com.robotraconteur.param.ParameterInfo\nusing com.robotraconteur.robotics.trajectory.TrajectoryStatus\nusing com.robotraconteur.robotics.trajectory.JointTrajectory\nusing com.robotraconteur.identifier.Identifier\nusing com.robotraconteur.action.ActionStatusCode\n\nenum RobotType\nunknown = 0,\nserial = 1,\ndual_arm,\ndifferential_drive,\nplanar,\nfloating,\nfreeform,\nother\nend\n\nenum RobotCommandMode\ninvalid_state = -1,\nhalt = 0,\njog,\ntrajectory,\nposition_command,\nvelocity_command,\nhoming\nend\n\nenum RobotOperationalMode\nundefined = 0,\nmanual_reduced_speed,\nmanual_full_speed,\nauto,\ncobot\nend\n\nenum RobotControllerState\nundefined = 0,\ninit = 1,\nmotor_on,\nmotor_off,\nguard_stop,\nemergency_stop,\nemergency_stop_reset\nend\n\nenum RobotErrorCategory\nunknown = 0,\ninvalid_operation,\ninvalid_argument,\ninvalid_command,\ninvalid_mode,\nhardware_fault,\nsoftware_fault,\ncommunication_failure,\nkinematic_error,\ndynamic_error,\noverload_error,\ncommand_error,\nuser_software_error,\ncollision_imminent,\ncollision_occured,\nsensor_failure,\nsensor_out_of_range,\nsafety_violation,\nworkspace_violation,\nworkspace_intrusion,\nestop_active,\nguard_stop\nend\n\nenum RobotCapabilities\nunknown = 0,\njog_command = 0x1,\ntrajectory_command = 0x2,\nposition_command = 0x4,\nvelocity_command = 0x8,\nhoming_command = 0x10,\nsoftware_reset_errors = 0x20,\nsoftware_enable = 0x40\nend\n\nenum RobotStateFlags\nunknown = 0,\nerror = 0x1,\nfatal_error = 0x2,\nestop = 0x4,\nestop_button1 = 0x8,\nestop_button2 = 0x10,\nestop_button3 = 0x20,\nestop_button4 = 0x40,\nestop_guard1 = 0x80,\nestop_guard2 = 0x100,\nestop_guard3 = 0x200,\nestop_guard4 = 0x400,\nestop_software = 0x800,\nestop_fault = 0x1000,\nestop_internal = 0x2000,\nestop_other = 0x4000,\nestop_released = 0x8000,\nenabling_switch = 0x10000,\nenabled = 0x20000,\nready = 0x40000,\nhomed = 0x80000,\nhoming_required = 0x100000,\ncommunication_failure = 0x200000,\nvalid_position_command = 0x1000000,\nvalid_velocity_command = 0x2000000,\ntrajectory_running = 0x4000000\nend\n\nstruct RobotKinChainInfo\nfield Identifier kin_chain_identifier\nfield Vector3[] H\nfield Vector3[] P\nfield SpatialInertia[] link_inertias\nfield Identifier{list} link_identifiers\nfield uint32[] joint_numbers\nfield Pose flange_pose\nfield Identifier flange_identifier\nfield ToolInfo current_tool\nfield PayloadInfo current_payload\nfield SpatialVelocity tcp_max_velocity\nfield SpatialAcceleration tcp_max_acceleration\nfield varvalue{string} extended\nend\n\nstruct RobotInfo\nfield DeviceInfo device_info\nfield RobotType robot_type\nfield JointInfo{list} joint_info\nfield RobotKinChainInfo{list} chains\nfield uint32 robot_capabilities\nfield SignalInfo{list} signal_info\nfield ParameterInfo{list} parameter_info\nfield uint16 config_seqno\nfield varvalue{string} extended\nend\n\nstruct RobotState\nfield uint64 seqno\nfield RobotCommandMode command_mode\nfield RobotOperationalMode operational_mode\nfield RobotControllerState controller_state\nfield uint64 robot_state_flags\nfield double[] joint_position\nfield double[] joint_velocity\nfield double[] joint_effort\nfield double[] joint_position_command\nfield double[] joint_velocity_command\nfield Pose[] kin_chain_tcp\nfield SpatialVelocity[] kin_chain_tcp_vel\nfield bool trajectory_running\nend\n\nstruct AdvancedRobotState\nfield uint64 seqno\nfield RobotCommandMode command_mode\nfield RobotOperationalMode operational_mode\nfield RobotControllerState controller_state\nfield uint64 robot_state_flags\nfield double[] joint_position\nfield double[] joint_velocity\nfield double[] joint_effort\nfield double[] joint_position_command\nfield double[] joint_velocity_command\nfield uint8[] joint_position_units\nfield uint8[] joint_effort_units\nfield Pose[] kin_chain_tcp\nfield SpatialVelocity[] kin_chain_tcp_vel\nfield bool trajectory_running\nfield double trajectory_time\nfield double trajectory_max_time\nfield uint32 trajectory_current_waypoint\nfield uint16 config_seqno\nend\n\nstruct RobotStateSensorData\nfield SensorDataHeader data_header\nfield AdvancedRobotState robot_state\nend\n\nstruct RobotJointCommand\nfield uint64 seqno\nfield uint64 state_seqno\nfield double[] command\n# Use JointUnits values\nfield uint8[] units\nend\n\nobject Robot\nproperty RobotInfo robot_info [readonly,nolock]\nproperty RobotCommandMode command_mode [nolockread]\nproperty RobotOperationalMode operational_mode [readonly, nolock]\nproperty RobotControllerState controller_state [readonly, nolock]\nproperty RobotErrorCategory{list} current_errors [readonly, nolock]\nfunction void halt() [urgent]\nfunction void enable()\nfunction void disable() [urgent]\nfunction void reset_errors()\nproperty double speed_ratio\nfunction void jog_joint(double[] joint_position, double[] max_velocity, bool relative, bool wait)\nfunction void jog_cartesian(Pose{int32} target_pose, SpatialVelocity{int32} max_velocity, bool relative, bool wait)\nfunction TrajectoryStatus{generator} execute_trajectory(JointTrajectory trajectory)\nwire RobotState robot_state [readonly,nolock]\nwire AdvancedRobotState advanced_robot_state [readonly,nolock]\npipe RobotStateSensorData robot_state_sensor_data [readonly,nolock]\nproperty uint32 update_downsample [perclient]\nproperty double update_rate [readonly]\nwire RobotJointCommand position_command [writeonly]\nwire RobotJointCommand velocity_command [writeonly]\nfunction ActionStatusCode{generator} home()\nfunction double getf_signal(string signal_name)\nfunction void setf_signal(string signal_name, double value)\nfunction void tool_attached(int32 chain, ToolInfo tool)\nfunction void tool_detached(int32 chain, string tool_name)\nevent tool_changed(int32 chain, string tool_name)\nfunction void payload_attached(int32 chain, PayloadInfo payload, Pose pose)\nfunction void payload_detached(int32 chain, string payload_name)\nevent payload_changed(int32 chain, string payload_name)\nfunction varvalue getf_param(string param_name)\nfunction void setf_param(string param_name, varvalue value)\nevent param_changed(string param_name)\nend\n\n\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.robotics.robot";}
    public RobotKinChainInfo_stub RobotKinChainInfo_stubentry;
    public RobotInfo_stub RobotInfo_stubentry;
    public RobotState_stub RobotState_stubentry;
    public AdvancedRobotState_stub AdvancedRobotState_stubentry;
    public RobotStateSensorData_stub RobotStateSensorData_stubentry;
    public RobotJointCommand_stub RobotJointCommand_stubentry;
    public com__robotraconteur__robotics__robotFactory() : this(null,null) {}
    public com__robotraconteur__robotics__robotFactory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
    {
    RobotKinChainInfo_stubentry=new RobotKinChainInfo_stub(this,this.node,this.context);
    RobotInfo_stubentry=new RobotInfo_stub(this,this.node,this.context);
    RobotState_stubentry=new RobotState_stub(this,this.node,this.context);
    AdvancedRobotState_stubentry=new AdvancedRobotState_stub(this,this.node,this.context);
    RobotStateSensorData_stubentry=new RobotStateSensorData_stub(this,this.node,this.context);
    RobotJointCommand_stubentry=new RobotJointCommand_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="RobotKinChainInfo")
    return RobotKinChainInfo_stubentry;
    if (objecttype=="RobotInfo")
    return RobotInfo_stubentry;
    if (objecttype=="RobotState")
    return RobotState_stubentry;
    if (objecttype=="AdvancedRobotState")
    return AdvancedRobotState_stubentry;
    if (objecttype=="RobotStateSensorData")
    return RobotStateSensorData_stubentry;
    if (objecttype=="RobotJointCommand")
    return RobotJointCommand_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Robot":
    return new Robot_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Robot":
    return new Robot_skel(path,(Robot)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class RobotKinChainInfo_stub : IStructureStub {
    public RobotKinChainInfo_stub(com__robotraconteur__robotics__robotFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__robotFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    RobotKinChainInfo s = (RobotKinChainInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "kin_chain_identifier",s.kin_chain_identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, "H",s.H));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, "P",s.P));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.SpatialInertia>(rr_node, rr_context, "link_inertias",s.link_inertias));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, "link_identifiers",s.link_identifiers));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<uint>("joint_numbers",s.joint_numbers));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "flange_pose",ref s.flange_pose));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "flange_identifier",s.flange_identifier));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "current_tool",s.current_tool));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "current_payload",s.current_payload));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.SpatialVelocity>(rr_node, rr_context, "tcp_max_velocity",ref s.tcp_max_velocity));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.SpatialAcceleration>(rr_node, rr_context, "tcp_max_acceleration",ref s.tcp_max_acceleration));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.robot.RobotKinChainInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    RobotKinChainInfo s=new RobotKinChainInfo();
    s.kin_chain_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"kin_chain_identifier"));
    s.H =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"H"));
    s.P =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Vector3>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"P"));
    s.link_inertias =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.SpatialInertia>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"link_inertias"));
    s.link_identifiers =MessageElementUtil.UnpackList<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"link_identifiers"));
    s.joint_numbers =MessageElementUtil.UnpackArray<uint>(MessageElement.FindElement(m.Elements,"joint_numbers"));
    s.flange_pose =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"flange_pose"));
    s.flange_identifier =MessageElementUtil.UnpackStructure<com.robotraconteur.identifier.Identifier>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"flange_identifier"));
    s.current_tool =MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.tool.ToolInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"current_tool"));
    s.current_payload =MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.payload.PayloadInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"current_payload"));
    s.tcp_max_velocity =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.SpatialVelocity>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"tcp_max_velocity"));
    s.tcp_max_acceleration =MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.SpatialAcceleration>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"tcp_max_acceleration"));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class RobotInfo_stub : IStructureStub {
    public RobotInfo_stub(com__robotraconteur__robotics__robotFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__robotFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    RobotInfo s = (RobotInfo)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "device_info",s.device_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotType>("robot_type",s.robot_type));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.robotics.joints.JointInfo>(rr_node, rr_context, "joint_info",s.joint_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<RobotKinChainInfo>(rr_node, rr_context, "chains",s.chains));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("robot_capabilities",s.robot_capabilities));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.signal.SignalInfo>(rr_node, rr_context, "signal_info",s.signal_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, "parameter_info",s.parameter_info));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ushort>("config_seqno",s.config_seqno));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackMapType<string,object>(rr_node, rr_context, "extended",s.extended));
    return new MessageElementStructure("com.robotraconteur.robotics.robot.RobotInfo",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    RobotInfo s=new RobotInfo();
    s.device_info =MessageElementUtil.UnpackStructure<com.robotraconteur.device.DeviceInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"device_info"));
    s.robot_type =MessageElementUtil.UnpackEnum<RobotType>(MessageElement.FindElement(m.Elements,"robot_type"));
    s.joint_info =MessageElementUtil.UnpackList<com.robotraconteur.robotics.joints.JointInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"joint_info"));
    s.chains =MessageElementUtil.UnpackList<RobotKinChainInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"chains"));
    s.robot_capabilities =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"robot_capabilities")));
    s.signal_info =MessageElementUtil.UnpackList<com.robotraconteur.signal.SignalInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"signal_info"));
    s.parameter_info =MessageElementUtil.UnpackList<com.robotraconteur.param.ParameterInfo>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"parameter_info"));
    s.config_seqno =(MessageElementUtil.UnpackScalar<ushort>(MessageElement.FindElement(m.Elements,"config_seqno")));
    s.extended =MessageElementUtil.UnpackMap<string,object>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"extended"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class RobotState_stub : IStructureStub {
    public RobotState_stub(com__robotraconteur__robotics__robotFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__robotFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    RobotState s = (RobotState)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotCommandMode>("command_mode",s.command_mode));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotOperationalMode>("operational_mode",s.operational_mode));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotControllerState>("controller_state",s.controller_state));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("robot_state_flags",s.robot_state_flags));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_position",s.joint_position));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_velocity",s.joint_velocity));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_effort",s.joint_effort));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_position_command",s.joint_position_command));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_velocity_command",s.joint_velocity_command));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "kin_chain_tcp",s.kin_chain_tcp));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.SpatialVelocity>(rr_node, rr_context, "kin_chain_tcp_vel",s.kin_chain_tcp_vel));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("trajectory_running",s.trajectory_running));
    return new MessageElementStructure("com.robotraconteur.robotics.robot.RobotState",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    RobotState s=new RobotState();
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"seqno")));
    s.command_mode =MessageElementUtil.UnpackEnum<RobotCommandMode>(MessageElement.FindElement(m.Elements,"command_mode"));
    s.operational_mode =MessageElementUtil.UnpackEnum<RobotOperationalMode>(MessageElement.FindElement(m.Elements,"operational_mode"));
    s.controller_state =MessageElementUtil.UnpackEnum<RobotControllerState>(MessageElement.FindElement(m.Elements,"controller_state"));
    s.robot_state_flags =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"robot_state_flags")));
    s.joint_position =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_position"));
    s.joint_velocity =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_velocity"));
    s.joint_effort =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_effort"));
    s.joint_position_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_position_command"));
    s.joint_velocity_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_velocity_command"));
    s.kin_chain_tcp =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"kin_chain_tcp"));
    s.kin_chain_tcp_vel =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.SpatialVelocity>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"kin_chain_tcp_vel"));
    s.trajectory_running =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"trajectory_running")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class AdvancedRobotState_stub : IStructureStub {
    public AdvancedRobotState_stub(com__robotraconteur__robotics__robotFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__robotFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    AdvancedRobotState s = (AdvancedRobotState)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotCommandMode>("command_mode",s.command_mode));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotOperationalMode>("operational_mode",s.operational_mode));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotControllerState>("controller_state",s.controller_state));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("robot_state_flags",s.robot_state_flags));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_position",s.joint_position));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_velocity",s.joint_velocity));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_effort",s.joint_effort));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_position_command",s.joint_position_command));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("joint_velocity_command",s.joint_velocity_command));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("joint_position_units",s.joint_position_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("joint_effort_units",s.joint_effort_units));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "kin_chain_tcp",s.kin_chain_tcp));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackNamedArray<com.robotraconteur.geometry.SpatialVelocity>(rr_node, rr_context, "kin_chain_tcp_vel",s.kin_chain_tcp_vel));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<bool>("trajectory_running",s.trajectory_running));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("trajectory_time",s.trajectory_time));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("trajectory_max_time",s.trajectory_max_time));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("trajectory_current_waypoint",s.trajectory_current_waypoint));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ushort>("config_seqno",s.config_seqno));
    return new MessageElementStructure("com.robotraconteur.robotics.robot.AdvancedRobotState",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    AdvancedRobotState s=new AdvancedRobotState();
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"seqno")));
    s.command_mode =MessageElementUtil.UnpackEnum<RobotCommandMode>(MessageElement.FindElement(m.Elements,"command_mode"));
    s.operational_mode =MessageElementUtil.UnpackEnum<RobotOperationalMode>(MessageElement.FindElement(m.Elements,"operational_mode"));
    s.controller_state =MessageElementUtil.UnpackEnum<RobotControllerState>(MessageElement.FindElement(m.Elements,"controller_state"));
    s.robot_state_flags =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"robot_state_flags")));
    s.joint_position =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_position"));
    s.joint_velocity =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_velocity"));
    s.joint_effort =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_effort"));
    s.joint_position_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_position_command"));
    s.joint_velocity_command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"joint_velocity_command"));
    s.joint_position_units =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"joint_position_units"));
    s.joint_effort_units =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"joint_effort_units"));
    s.kin_chain_tcp =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"kin_chain_tcp"));
    s.kin_chain_tcp_vel =MessageElementUtil.UnpackNamedArray<com.robotraconteur.geometry.SpatialVelocity>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"kin_chain_tcp_vel"));
    s.trajectory_running =(MessageElementUtil.UnpackScalar<bool>(MessageElement.FindElement(m.Elements,"trajectory_running")));
    s.trajectory_time =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"trajectory_time")));
    s.trajectory_max_time =(MessageElementUtil.UnpackScalar<double>(MessageElement.FindElement(m.Elements,"trajectory_max_time")));
    s.trajectory_current_waypoint =(MessageElementUtil.UnpackScalar<uint>(MessageElement.FindElement(m.Elements,"trajectory_current_waypoint")));
    s.config_seqno =(MessageElementUtil.UnpackScalar<ushort>(MessageElement.FindElement(m.Elements,"config_seqno")));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class RobotStateSensorData_stub : IStructureStub {
    public RobotStateSensorData_stub(com__robotraconteur__robotics__robotFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__robotFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    RobotStateSensorData s = (RobotStateSensorData)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "data_header",s.data_header));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "robot_state",s.robot_state));
    return new MessageElementStructure("com.robotraconteur.robotics.robot.RobotStateSensorData",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    RobotStateSensorData s=new RobotStateSensorData();
    s.data_header =MessageElementUtil.UnpackStructure<com.robotraconteur.sensordata.SensorDataHeader>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"data_header"));
    s.robot_state =MessageElementUtil.UnpackStructure<AdvancedRobotState>(rr_node, rr_context, MessageElement.FindElement(m.Elements,"robot_state"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class RobotJointCommand_stub : IStructureStub {
    public RobotJointCommand_stub(com__robotraconteur__robotics__robotFactory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private com__robotraconteur__robotics__robotFactory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    RobotJointCommand s = (RobotJointCommand)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("seqno",s.seqno));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<ulong>("state_seqno",s.state_seqno));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<double>("command",s.command));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("units",s.units));
    return new MessageElementStructure("com.robotraconteur.robotics.robot.RobotJointCommand",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    RobotJointCommand s=new RobotJointCommand();
    s.seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"seqno")));
    s.state_seqno =(MessageElementUtil.UnpackScalar<ulong>(MessageElement.FindElement(m.Elements,"state_seqno")));
    s.command =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(m.Elements,"command"));
    s.units =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"units"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Robot_stub : ServiceStub , Robot {
    private Pipe<RobotStateSensorData> rr_robot_state_sensor_data;
    private Wire<RobotState> rr_robot_state;
    private Wire<AdvancedRobotState> rr_advanced_robot_state;
    private Wire<RobotJointCommand> rr_position_command;
    private Wire<RobotJointCommand> rr_velocity_command;
    public Robot_stub(string path, ClientContext c) : base(path, c) {
    rr_robot_state_sensor_data=new PipeClient<RobotStateSensorData>("robot_state_sensor_data", this);
    rr_robot_state=new WireClient<RobotState>("robot_state", this);
    rr_advanced_robot_state=new WireClient<AdvancedRobotState>("advanced_robot_state", this);
    rr_position_command=new WireClient<RobotJointCommand>("position_command", this);
    rr_velocity_command=new WireClient<RobotJointCommand>("velocity_command", this);
    }
    public async Task<RobotInfo> get_robot_info(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "robot_info");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackStructure<RobotInfo>(rr_node, rr_context, me);
        }
    public async Task set_robot_info(RobotInfo value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"robot_info");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackStructure(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<RobotCommandMode> get_command_mode(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "command_mode");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackEnum<RobotCommandMode>(me);
        }
    public async Task set_command_mode(RobotCommandMode value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"command_mode");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotCommandMode>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<RobotOperationalMode> get_operational_mode(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "operational_mode");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackEnum<RobotOperationalMode>(me);
        }
    public async Task set_operational_mode(RobotOperationalMode value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"operational_mode");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotOperationalMode>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<RobotControllerState> get_controller_state(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "controller_state");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackEnum<RobotControllerState>(me);
        }
    public async Task set_controller_state(RobotControllerState value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"controller_state");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackEnum<RobotControllerState>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<List<RobotErrorCategory>> get_current_errors(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "current_errors");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return MessageElementUtil.UnpackList<RobotErrorCategory>(rr_node, rr_context, me);
        }
    public async Task set_current_errors(List<RobotErrorCategory> value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"current_errors");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackListType<RobotErrorCategory>(rr_node, rr_context, "value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_speed_ratio(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "speed_ratio");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_speed_ratio(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"speed_ratio");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<uint> get_update_downsample(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_downsample");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<uint>(me));
        }
    public async Task set_update_downsample(uint value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_downsample");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<uint>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "update_rate");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<double>(me));
        }
    public async Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"update_rate");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<double>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task halt(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"halt");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task enable(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"enable");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task disable(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"disable");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task reset_errors(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"reset_errors");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task jog_joint(double[] joint_position, double[] max_velocity, bool relative, bool wait, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"jog_joint");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackArray<double>("joint_position",joint_position));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackArray<double>("max_velocity",max_velocity));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<bool>("relative",relative));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<bool>("wait",wait));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task jog_cartesian(Dictionary<int,com.robotraconteur.geometry.Pose> target_pose, Dictionary<int,com.robotraconteur.geometry.SpatialVelocity> max_velocity, bool relative, bool wait, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"jog_cartesian");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackMapType<int,com.robotraconteur.geometry.Pose>(rr_node, rr_context, "target_pose",target_pose));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackMapType<int,com.robotraconteur.geometry.SpatialVelocity>(rr_node, rr_context, "max_velocity",max_velocity));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<bool>("relative",relative));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<bool>("wait",wait));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task<Generator2<com.robotraconteur.robotics.trajectory.TrajectoryStatus>> execute_trajectory(com.robotraconteur.robotics.trajectory.JointTrajectory trajectory, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"execute_trajectory");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "trajectory",trajectory));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator2Client<com.robotraconteur.robotics.trajectory.TrajectoryStatus>("execute_trajectory",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task<Generator2<com.robotraconteur.action.ActionStatusCode>> home(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"home");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return new Generator2Client<com.robotraconteur.action.ActionStatusCode>("home",this,rr_me.FindElement("index").CastData<int[]>()[0]);
    }
    public async Task<double> getf_signal(string signal_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_signal");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("signal_name",signal_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return (MessageElementUtil.UnpackScalar<double>(rr_me.FindElement("return")));
    }
    public async Task setf_signal(string signal_name, double value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_signal");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("signal_name",signal_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<double>("value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task tool_attached(int chain, com.robotraconteur.robotics.tool.ToolInfo tool, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"tool_attached");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "tool",tool));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task tool_detached(int chain, string tool_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"tool_detached");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("tool_name",tool_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task payload_attached(int chain, com.robotraconteur.robotics.payload.PayloadInfo payload, com.robotraconteur.geometry.Pose pose, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"payload_attached");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackStructure(rr_node, rr_context, "payload",payload));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackNamedArrayToArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, "pose",ref pose));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task payload_detached(int chain, string payload_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"payload_detached");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("payload_name",payload_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task<object> getf_param(string param_name, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"getf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    return MessageElementUtil.UnpackVarType(rr_node, rr_context, rr_me.FindElement("return"));
    }
    public async Task setf_param(string param_name, object value_, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"setf_param");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackString("param_name",param_name));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackVarType(rr_node, rr_context, "value",value_));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public event Action<int, string> tool_changed;
    public event Action<int, string> payload_changed;
    public event Action<string> param_changed;
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    case "tool_changed":
    {
    if (tool_changed != null) { 
    int chain=(MessageElementUtil.UnpackScalar<int>(rr_m.FindElement("chain")));
    string tool_name=MessageElementUtil.UnpackString(rr_m.FindElement("tool_name"));
    tool_changed(chain, tool_name);
    }
    return;
    }
    case "payload_changed":
    {
    if (payload_changed != null) { 
    int chain=(MessageElementUtil.UnpackScalar<int>(rr_m.FindElement("chain")));
    string payload_name=MessageElementUtil.UnpackString(rr_m.FindElement("payload_name"));
    payload_changed(chain, payload_name);
    }
    return;
    }
    case "param_changed":
    {
    if (param_changed != null) { 
    string param_name=MessageElementUtil.UnpackString(rr_m.FindElement("param_name"));
    param_changed(param_name);
    }
    return;
    }
    default:
    break;
    }
    }
    public Pipe<RobotStateSensorData> robot_state_sensor_data {
    get { return rr_robot_state_sensor_data;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<RobotState> robot_state {
    get { return rr_robot_state;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<AdvancedRobotState> advanced_robot_state {
    get { return rr_advanced_robot_state;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<RobotJointCommand> position_command {
    get { return rr_position_command;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<RobotJointCommand> velocity_command {
    get { return rr_velocity_command;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "robot_state_sensor_data":
    this.rr_robot_state_sensor_data.PipePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "robot_state":
    this.rr_robot_state.WirePacketReceived(m);
    break;
    case "advanced_robot_state":
    this.rr_advanced_robot_state.WirePacketReceived(m);
    break;
    case "position_command":
    this.rr_position_command.WirePacketReceived(m);
    break;
    case "velocity_command":
    this.rr_velocity_command.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class Robot_skel : ServiceSkel {
    protected Robot obj;
    public Robot_skel(string p,Robot o,ServerContext c) : base(p,o,c) { obj=(Robot)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "robot_info":
    {
    RobotInfo ret=await obj.get_robot_info();
    mr.AddElement(MessageElementUtil.PackStructure(rr_node, rr_context, "value",ret));
    break;
    }
    case "command_mode":
    {
    RobotCommandMode ret=await obj.get_command_mode();
    mr.AddElement(MessageElementUtil.PackEnum<RobotCommandMode>("value",ret));
    break;
    }
    case "operational_mode":
    {
    RobotOperationalMode ret=await obj.get_operational_mode();
    mr.AddElement(MessageElementUtil.PackEnum<RobotOperationalMode>("value",ret));
    break;
    }
    case "controller_state":
    {
    RobotControllerState ret=await obj.get_controller_state();
    mr.AddElement(MessageElementUtil.PackEnum<RobotControllerState>("value",ret));
    break;
    }
    case "current_errors":
    {
    List<RobotErrorCategory> ret=await obj.get_current_errors();
    mr.AddElement(MessageElementUtil.PackListType<RobotErrorCategory>(rr_node, rr_context, "value",ret));
    break;
    }
    case "speed_ratio":
    {
    double ret=await obj.get_speed_ratio();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    case "update_downsample":
    {
    uint ret=await obj.get_update_downsample();
    mr.AddElement(MessageElementUtil.PackScalar<uint>("value",ret));
    break;
    }
    case "update_rate":
    {
    double ret=await obj.get_update_rate();
    mr.AddElement(MessageElementUtil.PackScalar<double>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "robot_info":
    {
    await obj.set_robot_info(MessageElementUtil.UnpackStructure<RobotInfo>(rr_node, rr_context, me));
    break;
    }
    case "command_mode":
    {
    await obj.set_command_mode(MessageElementUtil.UnpackEnum<RobotCommandMode>(me));
    break;
    }
    case "operational_mode":
    {
    await obj.set_operational_mode(MessageElementUtil.UnpackEnum<RobotOperationalMode>(me));
    break;
    }
    case "controller_state":
    {
    await obj.set_controller_state(MessageElementUtil.UnpackEnum<RobotControllerState>(me));
    break;
    }
    case "current_errors":
    {
    await obj.set_current_errors(MessageElementUtil.UnpackList<RobotErrorCategory>(rr_node, rr_context, me));
    break;
    }
    case "speed_ratio":
    {
    await obj.set_speed_ratio((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    case "update_downsample":
    {
    await obj.set_update_downsample((MessageElementUtil.UnpackScalar<uint>(me)));
    break;
    }
    case "update_rate":
    {
    await obj.set_update_rate((MessageElementUtil.UnpackScalar<double>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "halt":
    {
    await this.obj.halt(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "enable":
    {
    await this.obj.enable(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "disable":
    {
    await this.obj.disable(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "reset_errors":
    {
    await this.obj.reset_errors(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "jog_joint":
    {
    double[] joint_position=MessageElementUtil.UnpackArray<double>(MessageElementUtil.FindElement(rr_m,"joint_position"));
    double[] max_velocity=MessageElementUtil.UnpackArray<double>(MessageElementUtil.FindElement(rr_m,"max_velocity"));
    bool relative=(MessageElementUtil.UnpackScalar<bool>(MessageElementUtil.FindElement(rr_m,"relative")));
    bool wait=(MessageElementUtil.UnpackScalar<bool>(MessageElementUtil.FindElement(rr_m,"wait")));
    await this.obj.jog_joint(joint_position, max_velocity, relative, wait, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "jog_cartesian":
    {
    Dictionary<int,com.robotraconteur.geometry.Pose> target_pose=MessageElementUtil.UnpackMap<int,com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"target_pose"));
    Dictionary<int,com.robotraconteur.geometry.SpatialVelocity> max_velocity=MessageElementUtil.UnpackMap<int,com.robotraconteur.geometry.SpatialVelocity>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"max_velocity"));
    bool relative=(MessageElementUtil.UnpackScalar<bool>(MessageElementUtil.FindElement(rr_m,"relative")));
    bool wait=(MessageElementUtil.UnpackScalar<bool>(MessageElementUtil.FindElement(rr_m,"wait")));
    await this.obj.jog_cartesian(target_pose, max_velocity, relative, wait, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "execute_trajectory":
    {
    com.robotraconteur.robotics.trajectory.JointTrajectory trajectory=MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.trajectory.JointTrajectory>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"trajectory"));
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator2<com.robotraconteur.robotics.trajectory.TrajectoryStatus> rr_ret=await this.obj.execute_trajectory(trajectory);
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator2Server<com.robotraconteur.robotics.trajectory.TrajectoryStatus>(rr_ret,"execute_trajectory",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "home":
    {
    var rr_ep = ServerEndpoint.CurrentEndpoint;
    Generator2<com.robotraconteur.action.ActionStatusCode> rr_ret=await this.obj.home();
    lock(generators) {
    int rr_index = GetNewGeneratorIndex();
    generators.Add(rr_index, new Generator2Server<com.robotraconteur.action.ActionStatusCode>(rr_ret,"home",rr_index, this, rr_ep));
    rr_mr.AddElement("index",rr_index);
    }
    break;
    }
    case "getf_signal":
    {
    string signal_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"signal_name"));
    double rr_ret=await this.obj.getf_signal(signal_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackScalar<double>("return",rr_ret));
    break;
    }
    case "setf_signal":
    {
    string signal_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"signal_name"));
    double value_=(MessageElementUtil.UnpackScalar<double>(MessageElementUtil.FindElement(rr_m,"value")));
    await this.obj.setf_signal(signal_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "tool_attached":
    {
    int chain=(MessageElementUtil.UnpackScalar<int>(MessageElementUtil.FindElement(rr_m,"chain")));
    com.robotraconteur.robotics.tool.ToolInfo tool=MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.tool.ToolInfo>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"tool"));
    await this.obj.tool_attached(chain, tool, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "tool_detached":
    {
    int chain=(MessageElementUtil.UnpackScalar<int>(MessageElementUtil.FindElement(rr_m,"chain")));
    string tool_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"tool_name"));
    await this.obj.tool_detached(chain, tool_name, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "payload_attached":
    {
    int chain=(MessageElementUtil.UnpackScalar<int>(MessageElementUtil.FindElement(rr_m,"chain")));
    com.robotraconteur.robotics.payload.PayloadInfo payload=MessageElementUtil.UnpackStructure<com.robotraconteur.robotics.payload.PayloadInfo>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"payload"));
    com.robotraconteur.geometry.Pose pose=MessageElementUtil.UnpackNamedArrayFromArray<com.robotraconteur.geometry.Pose>(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"pose"));
    await this.obj.payload_attached(chain, payload, pose, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "payload_detached":
    {
    int chain=(MessageElementUtil.UnpackScalar<int>(MessageElementUtil.FindElement(rr_m,"chain")));
    string payload_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"payload_name"));
    await this.obj.payload_detached(chain, payload_name, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "getf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object rr_ret=await this.obj.getf_param(param_name, default(CancellationToken));
    rr_mr.AddElement(MessageElementUtil.PackVarType(rr_node, rr_context, "return",rr_ret));
    break;
    }
    case "setf_param":
    {
    string param_name=MessageElementUtil.UnpackString(MessageElementUtil.FindElement(rr_m,"param_name"));
    object value_=MessageElementUtil.UnpackVarType(rr_node, rr_context, MessageElementUtil.FindElement(rr_m,"value"));
    await this.obj.setf_param(param_name, value_, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Robot)rrobj1;
    obj.tool_changed+=rr_tool_changed;
    obj.payload_changed+=rr_payload_changed;
    obj.param_changed+=rr_param_changed;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Robot)rrobj1;
    obj.tool_changed-=rr_tool_changed;
    obj.payload_changed-=rr_payload_changed;
    obj.param_changed-=rr_param_changed;
    }
    public void rr_tool_changed(int chain, string tool_name) {
    MessageEntry rr_mm=new MessageEntry(MessageEntryType.EventReq,"tool_changed");
    MessageElementUtil.AddMessageElement(rr_mm,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElement(rr_mm,MessageElementUtil.PackString("tool_name",tool_name));
    this.SendEvent(rr_mm);
    }
    public void rr_payload_changed(int chain, string payload_name) {
    MessageEntry rr_mm=new MessageEntry(MessageEntryType.EventReq,"payload_changed");
    MessageElementUtil.AddMessageElement(rr_mm,MessageElementUtil.PackScalar<int>("chain",chain));
    MessageElementUtil.AddMessageElement(rr_mm,MessageElementUtil.PackString("payload_name",payload_name));
    this.SendEvent(rr_mm);
    }
    public void rr_param_changed(string param_name) {
    MessageEntry rr_mm=new MessageEntry(MessageEntryType.EventReq,"param_changed");
    MessageElementUtil.AddMessageElement(rr_mm,MessageElementUtil.PackString("param_name",param_name));
    this.SendEvent(rr_mm);
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private PipeServer<RobotStateSensorData> rr_robot_state_sensor_data;
    private WireServer<RobotState> rr_robot_state;
    private WireServer<AdvancedRobotState> rr_advanced_robot_state;
    private WireServer<RobotJointCommand> rr_position_command;
    private WireServer<RobotJointCommand> rr_velocity_command;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Robot castobj=(Robot)o;
    this.rr_robot_state_sensor_data=new PipeServer<RobotStateSensorData>("robot_state_sensor_data",this);
    this.rr_robot_state=new WireServer<RobotState>("robot_state",this);
    this.rr_advanced_robot_state=new WireServer<AdvancedRobotState>("advanced_robot_state",this);
    this.rr_position_command=new WireServer<RobotJointCommand>("position_command",this);
    this.rr_velocity_command=new WireServer<RobotJointCommand>("velocity_command",this);
    castobj.robot_state_sensor_data=this.rr_robot_state_sensor_data;
    castobj.robot_state=this.rr_robot_state;
    castobj.advanced_robot_state=this.rr_advanced_robot_state;
    castobj.position_command=this.rr_position_command;
    castobj.velocity_command=this.rr_velocity_command;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Robot)rrobj1;
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "robot_state_sensor_data":
    return await this.rr_robot_state_sensor_data.PipeCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "robot_state":
    return await this.rr_robot_state.WireCommand(m,e);
    case "advanced_robot_state":
    return await this.rr_advanced_robot_state.WireCommand(m,e);
    case "position_command":
    return await this.rr_position_command.WireCommand(m,e);
    case "velocity_command":
    return await this.rr_velocity_command.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "robot_state_sensor_data":
    this.rr_robot_state_sensor_data.PipePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "robot_state":
    this.rr_robot_state.WirePacketReceived(m,e);
    break;
    case "advanced_robot_state":
    this.rr_advanced_robot_state.WirePacketReceived(m,e);
    break;
    case "position_command":
    this.rr_position_command.WirePacketReceived(m,e);
    break;
    case "velocity_command":
    this.rr_velocity_command.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override bool IsRequestNoLock(MessageEntry m) {
    if (m.MemberName == "robot_info") return true;
    if (m.MemberName == "command_mode" && m.EntryType == MessageEntryType.PropertyGetReq) return true;
    if (m.MemberName == "operational_mode") return true;
    if (m.MemberName == "controller_state") return true;
    if (m.MemberName == "current_errors") return true;
    if (m.MemberName == "robot_state") return true;
    if (m.MemberName == "advanced_robot_state") return true;
    if (m.MemberName == "robot_state_sensor_data") return true;
    return false;
    }
}
public class Robot_default_impl : Robot{
    protected PipeBroadcaster<RobotStateSensorData> rrvar_robot_state_sensor_data;
    protected WireBroadcaster<RobotState> rrvar_robot_state;
    protected WireBroadcaster<AdvancedRobotState> rrvar_advanced_robot_state;
    protected WireUnicastReceiver<RobotJointCommand> rrvar_position_command;
    protected WireUnicastReceiver<RobotJointCommand> rrvar_velocity_command;
    public virtual Task<RobotInfo> get_robot_info(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_robot_info(RobotInfo value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<RobotCommandMode> get_command_mode(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_command_mode(RobotCommandMode value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<RobotOperationalMode> get_operational_mode(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_operational_mode(RobotOperationalMode value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<RobotControllerState> get_controller_state(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_controller_state(RobotControllerState value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<List<RobotErrorCategory>> get_current_errors(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_current_errors(List<RobotErrorCategory> value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_speed_ratio(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_speed_ratio(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<uint> get_update_downsample(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_downsample(uint value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> get_update_rate(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_update_rate(double value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task halt(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task enable(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task disable(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task reset_errors(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task jog_joint(double[] joint_position, double[] max_velocity, bool relative, bool wait,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task jog_cartesian(Dictionary<int,com.robotraconteur.geometry.Pose> target_pose, Dictionary<int,com.robotraconteur.geometry.SpatialVelocity> max_velocity, bool relative, bool wait,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator2<com.robotraconteur.robotics.trajectory.TrajectoryStatus>> execute_trajectory(com.robotraconteur.robotics.trajectory.JointTrajectory trajectory,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<Generator2<com.robotraconteur.action.ActionStatusCode>> home(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<double> getf_signal(string signal_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_signal(string signal_name, double value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task tool_attached(int chain, com.robotraconteur.robotics.tool.ToolInfo tool,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task tool_detached(int chain, string tool_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task payload_attached(int chain, com.robotraconteur.robotics.payload.PayloadInfo payload, com.robotraconteur.geometry.Pose pose,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task payload_detached(int chain, string payload_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<object> getf_param(string param_name,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task setf_param(string param_name, object value_,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual event Action<int, string> tool_changed;
    public virtual event Action<int, string> payload_changed;
    public virtual event Action<string> param_changed;
    public virtual Pipe<RobotStateSensorData> robot_state_sensor_data {
    get { return rrvar_robot_state_sensor_data.Pipe;  }
    set {
    if (rrvar_robot_state_sensor_data!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_robot_state_sensor_data= new PipeBroadcaster<RobotStateSensorData>(value);
    }
    }
    public virtual Wire<RobotState> robot_state {
    get { return rrvar_robot_state.Wire;  }
    set {
    if (rrvar_robot_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_robot_state= new WireBroadcaster<RobotState>(value);
    }
    }
    public virtual Wire<AdvancedRobotState> advanced_robot_state {
    get { return rrvar_advanced_robot_state.Wire;  }
    set {
    if (rrvar_advanced_robot_state!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_advanced_robot_state= new WireBroadcaster<AdvancedRobotState>(value);
    }
    }
    public virtual Wire<RobotJointCommand> position_command {
    get { return rrvar_position_command.Wire;  }
    set {
    if (rrvar_position_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_position_command= new WireUnicastReceiver<RobotJointCommand>(value);
    }
    }
    public virtual Wire<RobotJointCommand> velocity_command {
    get { return rrvar_velocity_command.Wire;  }
    set {
    if (rrvar_velocity_command!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_velocity_command= new WireUnicastReceiver<RobotJointCommand>(value);
    }
    }
}
public static class RRExtensions
{
}
}
